{"version":3,"sources":["app/t8/main.cljs"],"mappings":"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","names":["app.t8.main/train","qmodel","n","c__25042__auto__","cljs.core.async.chan.cljs$core$IFn$_invoke$arity$1","cljs.core.async.impl.dispatch/run","f__25043__auto__","switch__25019__auto__","state_35150","state_val_35151","inst_34994","inst_35011","inst_35012","inst_35013","inst_35014","cljs.core/PROTOCOL_SENTINEL","inst_35015","statearr-35152","statearr-35153","inst_35035","inst_35029","inst_35030","inst_35125","inst_35126","inst_35127","inst_35128","inst_35129","inst_35130","inst_35131","statearr-35154","statearr-35155","statearr-35156","inst_35063","statearr-35157","inst_34988","inst_34989","inst_34990","inst_34991","cljs.core/PersistentHashMap","inst_34992","inst_34993","inst_34995","statearr-35158","statearr-35159","inst_35034","inst_35066","inst_35065","statearr-35160","statearr-35161","statearr-35162","inst_35082","statearr-35163","statearr-35164","inst_35033","inst_35091","statearr-35165","inst_34999","cljs.core/PersistentVector","inst_35000","inst_35001","inst_35002","inst_35003","inst_35004","statearr-35166","statearr-35167","inst_35028","inst_35135","inst_35136","inst_35137","inst_35138","inst_35139","statearr-35168","statearr-35169","inst_35027","cljs.core.get.cljs$core$IFn$_invoke$arity$2","inst_35031","inst_35032","inst_35036","inst_35037","inst_35038","statearr-35170","statearr-35171","statearr-35172","inst_35084","inst_35078","inst_35089","inst_35094","inst_35095","inst_35096","inst_35097","inst_35098","inst_35099","inst_35100","inst_35101","statearr-35173","statearr-35174","statearr-35175","inst_35142","statearr-35176","inst_35068","statearr-35177","statearr-35178","inst_35052","statearr-35179","statearr-35180","statearr-35181","inst_35071","statearr-35182","statearr-35183","inst_35024","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","statearr-35184","statearr-35185","statearr-35186","statearr-35187","statearr-35188","inst_35104","inst_35105","inst_35106","inst_35107","inst_35108","statearr-35189","statearr-35190","statearr-35191","inst_35086","statearr-35192","statearr-35193","statearr-35194","inst_35146","statearr-35195","statearr-35196","inst_35112","inst_35113","inst_35114","inst_35115","inst_35116","inst_35117","inst_35118","inst_35119","inst_35120","statearr-35197","statearr-35198","statearr-35199","inst_35073","inst_35074","inst_35075","statearr-35200","statearr-35201","statearr-35202","inst_35148","cljs.core.async.impl.ioc-helpers/return-chan","inst_35019","statearr-35203","inst_34997","statearr-35204","statearr-35205","inst_35053","statearr-35206","statearr-35207","statearr-35208","statearr-35209","statearr-35210","statearr-35211","statearr-35212","statearr-35213","inst_35022","statearr-35214","statearr-35215","inst_35008","inst_35009","cljs.core/not","statearr-35216","statearr-35217","statearr-35218","statearr-35219","statearr-35220","statearr-35221","statearr-35222","statearr-35223","inst_35040","inst_35041","inst_35042","inst_35043","inst_35044","inst_35045","inst_35046","inst_35047","inst_35048","statearr-35225","statearr-35226","statearr-35227","inst_35061","statearr-35228","statearr-35229","inst_35144","statearr-35230","statearr-35231","inst_35123","statearr-35232","statearr-35233","statearr-35234","statearr-35235","statearr-35236","state-machine__25020__auto__","ret-value__25021__auto__","result__25022__auto__","cljs.core/keyword-identical?","e35237","js/Object","ex__25023__auto__","statearr-35238","cljs.core.async.impl.ioc-helpers/process-exception","state__25044__auto__","statearr-35239","cljs.core.async.impl.ioc-helpers/USER-START-IDX","cljs.core.async.impl.ioc-helpers/run-state-machine-wrapped","app.t8.board/board","cljs.core.println.cljs$core$IFn$_invoke$arity$variadic","cljs.core/select-keys","app.t8.board/possibleActions","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","cljs.core/count","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic","app.t8.board/checkWin","app.t8.qlearning/learn","app.t8.qlearning/selectAction","cljs.core.update_in.cljs$core$IFn$_invoke$arity$3","cljs.core/constantly","cljs.core.nth.cljs$core$IFn$_invoke$arity$2","cljs.core/rand-int","app.t8.main/background-train","atomModel","state_35253","state_val_35254","inst_35240","statearr-35255","statearr-35256","inst_35242","cljs.core.async.impl.ioc-helpers/take!","inst_35251","inst_35244","inst_35245","statearr-35257","inst_35247","inst_35248","statearr-35258","statearr-35259","statearr-35260","e35261","statearr-35262","statearr-35263","app.t8.qlearning/model","cljs.core.async/timeout","cljs.core/reset!","app.t8.main/background-test","state_35288","state_val_35289","statearr-35290","inst_35265","inst_35286","inst_35267","inst_35268","cljs.core/deref","inst_35269","inst_35270","inst_35271","inst_35272","inst_35273","inst_35274","inst_35275","inst_35276","inst_35277","inst_35278","inst_35279","inst_35280","inst_35281","inst_35282","inst_35283","statearr-35291","statearr-35292","statearr-35293","e35294","statearr-35295","statearr-35296","app.t8.qlearning/bestAction","app.t8.main/main","state_35301","state_val_35302","inst_35297","inst_35298","inst_35299","statearr-35303","statearr-35304","e35305","statearr-35306","statearr-35307","cljs.core.atom.cljs$core$IFn$_invoke$arity$1"],"sourcesContent":["(ns app.t8.main\r\n  (:require [clojure.core.async :as a])\r\n  (:require [app.t8.qlearning :as q]\r\n            [app.t8.board :as b]))\r\n\r\n(defn train [qmodel n]\r\n  (a/go\r\n    (loop [ctx {:brain qmodel\r\n                :board b/board\r\n                :activePlayer :o\r\n                :win 0\r\n                :draw 0\r\n                :lose 0\r\n                :self {:state nil :action nil}}\r\n           n n]\r\n      (if (zero? n)\r\n        (do\r\n          (println (select-keys ctx [:win :draw :lose]))\r\n          (:brain ctx))\r\n        (let [{:keys [brain board activePlayer win draw lose self]} ctx\r\n              possibleActions (b/possibleActions board)\r\n              isSelf (= activePlayer :o)]\r\n          (if (zero? (count possibleActions))\r\n            (recur (merge ctx {:board b/board\r\n                               :activePlayer :o\r\n                               :draw (inc draw)\r\n                               :self {:action nil :state nil}})\r\n                   (dec n))\r\n            (if isSelf\r\n              (let [isWin (b/checkWin board :o)\r\n                    isLose (b/checkWin board :x)\r\n                    reward (cond\r\n                             isWin 10\r\n                             isLose -10\r\n                             :else 1)\r\n                    brain (if (and (:state self) (:action self))\r\n                            (q/learn brain (:state self) (:action self) reward board)\r\n                            brain)]\r\n                (if (or isWin isLose)\r\n                  (recur (merge ctx {:brain brain\r\n                                     :board b/board\r\n                                     :win (if isWin (inc win) win)\r\n                                     :lose (if isLose (inc lose) lose)\r\n                                     :activePlayer :o\r\n                                     :self {:action nil :state nil}})\r\n                         (dec n))\r\n                  (let [selectAction (q/selectAction brain board possibleActions)\r\n                        nextBoard (update-in board selectAction (constantly activePlayer))]\r\n                    (recur (merge ctx {:brain brain\r\n                                       :board nextBoard\r\n                                       :activePlayer (if (= :o activePlayer) :x :o)\r\n                                       :self (merge self {:state board\r\n                                                          :action selectAction})})\r\n                           (dec n)))))\r\n\r\n              (let [selectAction (nth possibleActions (rand-int (count possibleActions)))\r\n                    nextBoard (update-in board selectAction (constantly activePlayer))]\r\n                (recur (merge ctx {:brain brain\r\n                                   :board nextBoard\r\n                                   :activePlayer (if (= :o activePlayer) :x :o)})\r\n                       (dec n))))))))))\r\n\r\n(defn background-train [atomModel]\r\n  (a/go\r\n    (loop [qmodel q/model]\r\n      (a/<! (a/timeout 100))\r\n      (let [qmodel (a/<! (train qmodel 100))]\r\n        (reset! atomModel qmodel)\r\n        (comment (for [[state actions] (get-in qmodel [:qtable])\r\n                       [action value] actions]\r\n                   (println state action value)))\r\n        (recur qmodel)))))\r\n\r\n(defn background-test [atomModel]\r\n  (a/go\r\n    (loop []\r\n      (a/<! (a/timeout 1000))\r\n      (let [qmodel @atomModel\r\n            board [[:o :o nil] [:x :x nil] [nil nil nil]]\r\n            possibleActions (b/possibleActions board)]\r\n        (println \"best:\" (q/bestAction qmodel board possibleActions))\r\n        (recur)))))\r\n\r\n(defn main []\r\n  (a/go\r\n    (let [model (atom q/model)\r\n          _ (background-train model)\r\n          _ (background-test model)])))\r\n\r\n\r\n(main)"]}