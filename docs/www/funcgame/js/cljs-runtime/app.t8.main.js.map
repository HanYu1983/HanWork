{"version":3,"sources":["app/t8/main.cljs"],"mappings":"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","names":["app.t8.main/train","qmodel","n","ctx","app.t8.board/board","cljs.core.println.cljs$core$IFn$_invoke$arity$variadic","cljs.core/select-keys","map__36943","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","brain","board","activePlayer","win","draw","lose","self","possibleActions","app.t8.board/possibleActions","isSelf","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","cljs.core/count","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic","isWin","app.t8.board/checkWin","isLose","cljs.core/not","reward","and__4120__auto__","app.t8.qlearning/learn","or__4131__auto__","selectAction","app.t8.qlearning/selectAction","nextBoard","cljs.core.update_in.cljs$core$IFn$_invoke$arity$3","cljs.core/constantly","cljs.core.nth.cljs$core$IFn$_invoke$arity$2","cljs.core/rand-int","app.t8.main/background-train","atomModel","c__25042__auto__","cljs.core.async.chan.cljs$core$IFn$_invoke$arity$1","cljs.core.async.impl.dispatch/run","f__25043__auto__","switch__25019__auto__","state_36957","state_val_36958","inst_36945","cljs.core/deref","inst_36946","statearr-36959","statearr-36960","inst_36948","cljs.core.async.impl.ioc-helpers/take!","inst_36955","cljs.core.async.impl.ioc-helpers/return-chan","inst_36950","inst_36951","inst_36952","statearr-36961","statearr-36962","statearr-36963","state-machine__25020__auto__","ret-value__25021__auto__","result__25022__auto__","cljs.core/keyword-identical?","e36964","js/Object","ex__25023__auto__","statearr-36965","cljs.core.async.impl.ioc-helpers/process-exception","state__25044__auto__","statearr-36966","cljs.core.async.impl.ioc-helpers/USER-START-IDX","cljs.core.async.impl.ioc-helpers/run-state-machine-wrapped","cljs.core.async/timeout","cljs.core/reset!","app.t8.main/background-test","state_37014","state_val_37015","statearr-37016","inst_36968","inst_37012","inst_36970","inst_36971","inst_36972","cljs.core/PersistentVector","inst_36973","inst_36974","inst_36975","inst_36976","inst_36977","inst_36978","inst_36979","inst_36980","inst_36981","inst_36982","inst_36983","inst_36984","inst_36989","s__36986","cljs.core/LazySeq","temp__5735__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__4521__auto__","size__4522__auto__","b__36988","cljs.core/chunk-buffer","i__36987","vec__37017","cljs.core._nth.cljs$core$IFn$_invoke$arity$2","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__36985","cljs.core/chunk-rest","vec__37020","cljs.core/first","cljs.core/cons","cljs.core/rest","inst_36990","inst_36991","inst_36992","inst_36993","inst_36994","inst_36995","inst_36996","inst_36997","inst_36998","inst_36999","inst_37000","inst_37001","inst_37002","inst_37003","inst_37004","inst_37005","inst_37006","inst_37007","inst_37008","inst_37009","statearr-37023","statearr-37024","statearr-37025","e37026","statearr-37027","statearr-37028","cljs.core.print.cljs$core$IFn$_invoke$arity$variadic","action","value","cljs.core.get_in.cljs$core$IFn$_invoke$arity$2","app.t8.qlearning/bestAction","app.t8.main/render-board","state","reagent.core.atom.cljs$core$IFn$_invoke$arity$1","active","result","state_37077","state_val_37078","inst_37038","inst_37036","inst_37046","inst_37040","inst_37033","inst_37050","pred__37030","expr__37031","inst_37051","inst_37052","inst_37053","statearr-37079","statearr-37080","statearr-37081","statearr-37082","inst_37037","inst_37039","inst_37041","inst_37042","inst_37043","inst_37044","inst_37045","inst_37047","inst_37048","statearr-37083","statearr-37084","statearr-37085","inst_37063","statearr-37086","statearr-37087","inst_37073","statearr-37088","inst_37075","inst_37057","inst_37058","statearr-37089","statearr-37090","inst_37034","statearr-37091","statearr-37092","statearr-37093","statearr-37094","inst_37066","statearr-37095","inst_37068","inst_37070","statearr-37096","statearr-37097","statearr-37098","inst_37061","statearr-37099","e37100","statearr-37101","statearr-37102","cljs.core/=","actions","bestAction","_","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2","origin","app.t8.main/drawPlayground","s","ac","r","drawValue","y","x","v","pred__37103","expr__37104","G__37106","G__37107","G__37108","G__37109","iter__4523__auto__","s__37111","b__37113","i__37112","iter__37110","cljs.core.range.cljs$core$IFn$_invoke$arity$1","reagent.core.render.cljs$core$IFn$_invoke$arity$2","js/document","app.t8.main/main","state_37122","state_val_37123","inst_37114","inst_37115","inst_37116","cljs.core/PersistentHashMap","inst_37117","inst_37118","inst_37119","inst_37120","statearr-37124","statearr-37125","e37126","statearr-37127","statearr-37128","cljs.core.atom.cljs$core$IFn$_invoke$arity$1","app.t8.qlearning/model","cljs.core/chunk-first"],"sourcesContent":["(ns app.t8.main\r\n  (:require [clojure.core.async :as a]\r\n            [reagent.core :as r])\r\n  (:require [app.t8.qlearning :as q]\r\n            [app.t8.board :as b]))\r\n\r\n(defn train [qmodel n]\r\n  (loop [ctx {:brain qmodel\r\n              :board b/board\r\n              :activePlayer :o\r\n              :win 0\r\n              :draw 0\r\n              :lose 0\r\n              :self {:state nil :action nil}}\r\n         n n]\r\n    (if (zero? n)\r\n      (do\r\n        (println (select-keys ctx [:win :draw :lose]))\r\n        (:brain ctx))\r\n      (let [{:keys [brain board activePlayer win draw lose self]} ctx\r\n            possibleActions (b/possibleActions board)\r\n            isSelf (= activePlayer :o)]\r\n        (if (zero? (count possibleActions))\r\n          (recur (merge ctx {:board b/board\r\n                             :activePlayer :o\r\n                             :draw (inc draw)\r\n                             :self {:action nil :state nil}})\r\n                 (dec n))\r\n          (if isSelf\r\n            (let [isWin (b/checkWin board :o)\r\n                  isLose (if (not isWin)\r\n                           (b/checkWin board :x)\r\n                           false)\r\n                  reward (cond\r\n                           isWin 1\r\n                           isLose 0\r\n                           :else 0)\r\n                  brain (if (and (:state self) (:action self))\r\n                          (q/learn brain (:state self) (:action self) reward board)\r\n                          brain)]\r\n              (if (or isWin isLose)\r\n                (recur (merge ctx {:brain brain\r\n                                   :board b/board\r\n                                   :win (if isWin (inc win) win)\r\n                                   :lose (if isLose (inc lose) lose)\r\n                                   :activePlayer :o\r\n                                   :self {:action nil :state nil}})\r\n                       (dec n))\r\n                (let [selectAction (q/selectAction brain board possibleActions)\r\n                      nextBoard (update-in board selectAction (constantly activePlayer))]\r\n                  (recur (merge ctx {:brain brain\r\n                                     :board nextBoard\r\n                                     :activePlayer (if (= :o activePlayer) :x :o)\r\n                                     :self (merge self {:state board\r\n                                                        :action selectAction})})\r\n                         (dec n)))))\r\n\r\n            (let [selectAction (nth possibleActions (rand-int (count possibleActions)))\r\n                  nextBoard (update-in board selectAction (constantly activePlayer))]\r\n              (recur (merge ctx {:brain brain\r\n                                 :board nextBoard\r\n                                 :activePlayer (if (= :o activePlayer) :x :o)})\r\n                     (dec n)))))))))\r\n\r\n(defn background-train [atomModel]\r\n  (a/go\r\n    (loop [qmodel @atomModel]\r\n      (a/<! (a/timeout 1000))\r\n      (let [qmodel (train qmodel 75)\r\n            _ (reset! atomModel qmodel)]\r\n        (recur qmodel)))))\r\n\r\n(defn background-test [atomModel]\r\n  (a/go\r\n    (loop []\r\n      (a/<! (a/timeout 1000))\r\n      (let [qmodel @atomModel\r\n            board [[:o :o nil] [:x :x nil] [nil nil nil]]\r\n            possibleActions (b/possibleActions board)]\r\n        (print (for [;[state actions] (get-in qmodel [:qtable])\r\n              [action value] (get-in qmodel [:qtable [[nil nil nil] [nil nil nil] [nil nil nil]]])]\r\n          (println action value)))\r\n        (println \"best:\" (q/bestAction qmodel board possibleActions))\r\n        \r\n        (recur)))))\r\n\r\n(defn render-board [atomModel]\r\n   ; \u548c\u8a13\u7df4\u4e2d\u7684\u982d\u8166\u5c0d\u4e0b\u7684\u4e92\u52d5\u4ecb\u9762\r\n  (let [state (r/atom b/board)\r\n        active (r/atom :enemy)\r\n        result (r/atom nil)]\r\n      ; \u96fb\u8166\u884c\u70ba\r\n      ; \u7b49\u5f85\u73a9\u5bb6\u4e0b\u5b50\u5f8c\u4e0b\u5b50\r\n    (a/go-loop []\r\n      (condp = @active\r\n        :enemy\r\n        (let [brain @atomModel\r\n              actions (b/possibleActions @state)\r\n              bestAction (q/bestAction brain @state actions)\r\n              _ (reset! result (get-in brain [:qtable @state]))]\r\n          (if (> (count actions) 0)\r\n              ; \u9084\u6709\u4e0b\u5b50\u7a7a\u9593, \u4e0b\u5b50\u4e26\u5207\u63db\u73a9\u5bb6\r\n            (do (swap! state (fn [origin]\r\n                               (update-in origin bestAction (constantly :o))))\r\n                (reset! active (if (= :player @active) :enemy :player))\r\n                (recur))\r\n              ; \u6c92\u6709\u4e0b\u5b50\u7a7a\u9593, \u7b49\u5f85\r\n            (do\r\n              (a/<! (a/timeout 1000))\r\n              (recur))))\r\n\r\n          ; \u9592\u7f6e\u6642\u66f4\u65b0\u8a13\u7df4\u8cc7\u6599\u7684\u986f\u793a\r\n        (do\r\n          (a/<! (a/timeout 300))\r\n          (recur))))\r\n\r\n      ; \u76e4\u9762\r\n    (defn drawPlayground []\r\n      (let [s @state\r\n            ac @active\r\n            r @result\r\n            drawValue (fn [y x]\r\n                        (let [v (get-in s [y x])]\r\n                          (condp = v\r\n                            :o \"O\"\r\n                            :x \"X\"\r\n                            [:button\r\n                             {:on-click #(do\r\n                                           (swap! state (fn [origin]\r\n                                                          (update-in origin [y x] (constantly :x))))\r\n                                           (reset! active (if (= :player @active) :enemy :player)))}\r\n                             \"O\"])))]\r\n        [:div\r\n         [:button {:on-click #(do (reset! state b/board)\r\n                                  (reset! active :enemy))} \"clear\"]\r\n         [:div (str s)]\r\n         [:div (str \"active \" ac)]\r\n         [:div (str \"actions \" r)]\r\n         [:table {:border 1}\r\n          [:tbody\r\n           (for [y (range 3)]\r\n             ^{:key (str y)}\r\n             [:tr\r\n              [:td (drawValue y 0)]\r\n              [:td (drawValue y 1)]\r\n              [:td (drawValue y 2)]])]]]))\r\n\r\n    (r/render [drawPlayground]\r\n              (.getElementById js/document \"playground\"))))\r\n\r\n(defn main []\r\n  (a/go\r\n    (let [model (atom (merge q/model\r\n                             {:learningRate 0.7\r\n                              :discountFactor 1}))\r\n          _ (background-train model)\r\n          ;_ (background-test model)\r\n          _ (render-board model)])))\r\n\r\n\r\n(main)"]}