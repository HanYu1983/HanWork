{"version":3,"sources":["app/t4/main.cljs"],"mappings":"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","names":["p__36369","vec__36370","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","app.t4.main/flip","y","x","pos","ctx","openCnt","v","cljs.core/some","cljs.core.partial.cljs$core$IFn$_invoke$arity$2","cljs.core/=","cljs.core.filter.cljs$core$IFn$_invoke$arity$2","cljs.core/flatten","cljs.core/count","isPass","cljs.core.get_in.cljs$core$IFn$_invoke$arity$2","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","cljs.core.update_in.cljs$core$IFn$_invoke$arity$3","cljs.core.concat.cljs$core$IFn$_invoke$arity$2","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic","app.t4.main/updateView","changeState","cljs.core/map?","pred__36375","expr__36376","G__36378","G__36379","G__36386","G__36387","clojure.walk/prewalk","app.t4.main/checkWait","waitView","waitCnt","pass","cljs.core.map.cljs$core$IFn$_invoke$arity$2","p__36392","vec__36393","id","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","p__36396","map__36397","cljs.core/PROTOCOL_SENTINEL","cljs.core/hash-map","vec__36398","cljs.core.get.cljs$core$IFn$_invoke$arity$2","app.t4.main/updateViewTimer","cljs.core/+","app.t4.main/updateTimer","now","js/Date","last","elapsed","app.t4.main/step","app.t4.main/main","app.t4.main/model","app.t4.main/evt","cljs.core.async.chan.cljs$core$IFn$_invoke$arity$0","js/setInterval","c__30213__auto__","cljs.core.async.chan.cljs$core$IFn$_invoke$arity$1","cljs.core.async.impl.dispatch/run","f__30214__auto__","switch__30004__auto__","state_36480","state_val_36482","inst_36474","inst_36475","inst_36476","cljs.core/PersistentHashMap","cljs.core.async.impl.ioc-helpers/put!","inst_36478","cljs.core.async.impl.ioc-helpers/return-chan","statearr-36530","state-machine__30005__auto__","ret-value__30006__auto__","result__30007__auto__","cljs.core/keyword-identical?","e36532","js/Object","ex__30008__auto__","statearr-36534","cljs.core.async.impl.ioc-helpers/process-exception","state__30215__auto__","statearr-36543","cljs.core.async.impl.ioc-helpers/USER-START-IDX","cljs.core.async.impl.ioc-helpers/run-state-machine-wrapped","data","view","iter__4523__auto__","s__36546","cljs.core/LazySeq","temp__5735__auto__","cljs.core/seq","xs__6292__auto__","cljs.core/first","iterys__4519__auto__","s__36548","cljs.core/chunked-seq?","c__4521__auto__","size__4522__auto__","b__36550","cljs.core/chunk-buffer","i__36549","cljs.core._nth.cljs$core$IFn$_invoke$arity$2","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__36547","cljs.core/chunk-rest","cljs.core/cons","cljs.core/rest","fs__4520__auto__","iter__36545","cljs.core.range.cljs$core$IFn$_invoke$arity$1","cljs.core.partition.cljs$core$IFn$_invoke$arity$2","cljs.core/into","cljs.core.into.cljs$core$IFn$_invoke$arity$2","state_36669","state_val_36670","inst_36664","statearr-36679","inst_36582","inst_36591","cljs.core/PersistentVector","inst_36592","inst_36593","inst_36594","inst_36595","inst_36596","inst_36597","inst_36598","inst_36599","inst_36600","inst_36601","statearr-36691","statearr-36692","inst_36605","inst_36609","inst_36610","statearr-36736","statearr-36738","statearr-36739","inst_36623","statearr-36743","statearr-36744","inst_36666","inst_36603","statearr-36748","cljs.core.async.impl.ioc-helpers/take!","inst_36659","statearr-36749","statearr-36750","inst_36616","inst_36617","inst_36618","inst_36620","statearr-36757","statearr-36758","inst_36662","statearr-36760","inst_36632","inst_36633","inst_36634","inst_36636","inst_36637","inst_36638","inst_36640","inst_36641","inst_36642","inst_36643","cljs.core//","inst_36644","inst_36645","inst_36646","inst_36647","inst_36648","inst_36650","inst_36651","inst_36652","inst_36653","inst_36654","statearr-36772","statearr-36775","statearr-36781","e36782","statearr-36785","statearr-36788","cljs.core.map.cljs$core$IFn$_invoke$arity$3","cljs.core/int","p5","js/window","canvas","state_36802","state_val_36803","inst_36796","inst_36797","inst_36798","inst_36800","statearr-36809","e36810","statearr-36811","statearr-36820","state_36853","state_val_36854","inst_36844","inst_36845","inst_36846","inst_36847","inst_36848","inst_36849","inst_36851","statearr-36863","e36864","statearr-36871","statearr-36875","cljs.core.dorun.cljs$core$IFn$_invoke$arity$1","map__36883","vec__36886","txt","cljs.core/chunk-first"],"sourcesContent":["(ns app.t4.main\r\n  (:require-macros\r\n    [cljs.core.async.macros :as am])\r\n  (:require [cljs.core.async :as a]\r\n            [clojure.walk :as w]))\r\n\r\n; \u7ffb\u958b\u5361\u7247\r\n(defn flip [[y x :as pos] ctx]\r\n  (let [; \u7ffb\u958b\u7684\u6578\u91cf\u5927\u65bc2\u5c31\u4e0d\u80fd\u7ffb\r\n        openCnt (->\r\n                    (fn [v] \r\n                      (some (partial = (:state v)) [:open :wait]))\r\n                    (filter (flatten (:view ctx)))                    \r\n                    count)\r\n        ; \u5df2\u662f\u6210\u529f\u72c0\u614b\u7684\u5361\u4e0d\u80fd\u7ffb\r\n        isPass (->\r\n                   (get-in ctx [:view y x :state])\r\n                   (= :pass))]\r\n    (if (or isPass (>= openCnt 2))\r\n      ctx\r\n      (update-in ctx (concat [:view] pos) \r\n        (fn [v] (merge v {:state :open :timer 0}))))))\r\n\r\n(defn updateView [ctx]\r\n  (let [changeState \r\n        (fn [v]\r\n          ; \u53ea\u91dd\u5c0d\u8449\u7bc0\u9ede\u9032\u884c\u4fee\u6539\r\n          (if-not (map? v)\r\n            v\r\n            (condp = (:state v)\r\n              ; \u7ffb\u958b\u79d21\u5f8c\u7b49\u5f85\u914d\u5c0d\r\n              :open\r\n              (if-not (> (:timer v) 1000)\r\n                v\r\n                (merge v {:state :wait :timer 0}))\r\n              \r\n              :close v\r\n              \r\n              v)))]\r\n    ; 2\u7dad\u9663\u5217\u4f7f\u7528walk\u5957\u4ef6\u4f86\u8655\u7406\u6bd4\u8f03\u65b9\u4fbf\r\n    (merge ctx {:view (w/prewalk changeState (:view ctx))})))\r\n\r\n; wait\u72c0\u614b\u4ee3\u8868\u8981\u914d\u5c0d\r\n(defn checkWait [ctx]\r\n  (let [; \u53d6\u5f97\u8981\u914d\u5c0d\u7684\u5361\uff0c\u82e5\u5f35\u6578\u5927\u65bc2\u5f35\r\n        waitView (->\r\n                     (fn [v] \r\n                       (some (partial = (:state v)) [:wait]))\r\n                     (filter (flatten (:view ctx))))\r\n        waitCnt (count waitView)]\r\n    (if (< waitCnt 2)\r\n      ctx\r\n      ; \u5224\u65b72\u5f35\u662f\u5426\u76f8\u7b49\r\n      (let [pass (->>\r\n                      waitView\r\n                      (map :id)\r\n                      (map (fn [[y x :as id]] (get-in ctx (concat [:data] id))))\r\n                      (apply =))]\r\n        ; \u4fee\u6539\u72c0\u614b\r\n        (reduce\r\n          (fn [ctx {[y x :as id] :id :as v}]\r\n            (update-in ctx (concat [:view] id) \r\n              (fn [v]\r\n                (merge v {:state (if pass :pass :close)\r\n                          :timer 0}))))\r\n          ctx\r\n          waitView)))))\r\n\r\n(defn updateViewTimer [ctx]\r\n  (let [changeState \r\n        (fn [v]\r\n          ; \u53ea\u91dd\u5c0d\u8449\u7bc0\u9ede\u9032\u884c\u4fee\u6539\r\n          (if-not (map? v)\r\n            v\r\n            (update-in v [:timer] (partial + (get-in ctx [:timer :elapsed])))))]\r\n    (merge ctx {:view (w/prewalk changeState (:view ctx))})))\r\n\r\n; \u8a08\u7b97\u6bcf\u5075\u6642\u9593\u9593\u9694\r\n(defn updateTimer [ctx]\r\n  (let [now (-> (js/Date.) (.getTime))\r\n        last (get-in ctx [:timer :last])\r\n        elapsed (- now last)]\r\n    (merge ctx {:timer {:last now :elapsed elapsed}})))\r\n\r\n(defn step [ctx]\r\n  (-> ctx\r\n      updateTimer\r\n      updateView\r\n      checkWait\r\n      updateViewTimer))\r\n\r\n(defn main []\r\n  (def model nil)\r\n  (def evt (a/chan))\r\n  \r\n  (js/setInterval\r\n      (fn []\r\n        (am/go\r\n          (a/>! evt {:type :update})))\r\n      33)\r\n  \r\n  (let [; \u5b9a\u7fa9\u5361\u7247\u8cc7\u6599\r\n        data [[0 0 1 1 2 2]\r\n              [3 3 4 4 5 5]\r\n              [6 6 7 7 8 8]]\r\n        ; \u5efa\u7acb\u8996\u89ba\u7269\u4ef6\r\n        view (->>\r\n                  (for [y (range 3)\r\n                        x (range 6)]\r\n                    {:id [y x]\r\n                     :state :close\r\n                     :timer 0})\r\n                  (partition 6)\r\n                  (map (partial into []))\r\n                  (into []))]\r\n    (am/go-loop [ctx {:select [0 0]\r\n                      :data data\r\n                      :view view\r\n                      :timer {:last (-> (js/Date.) (.getTime)) :elapsed 0}}]\r\n      (set! model ctx)\r\n      (let [e (a/<! evt)]\r\n        (condp = (:type e)\r\n          :mousePressed\r\n          (let [[y x :as id] (:select ctx)]\r\n            (recur (flip id ctx)))\r\n          \r\n          :mouseMoved\r\n          (let [[mx my] (:info e)\r\n                [y x] (->>\r\n                           (map / [my mx] [100 100])\r\n                           (map int))]\r\n            (recur (merge ctx {:select [y x]})))\r\n          \r\n          (recur (step ctx))))))\r\n  \r\n  (let [p5 js/window]\r\n    (set! (.-setup p5)\r\n      (fn []\r\n        (let [canvas (.createCanvas p5 600 300)]\r\n          (.mousePressed canvas\r\n            (fn []\r\n              (am/go\r\n                (a/>! evt {:type :mousePressed}))))\r\n          (.mouseMoved canvas            \r\n            (fn []\r\n              (let [x (.-mouseX p5)\r\n                    y (.-mouseY p5)]\r\n                (am/go\r\n                  (a/>! evt {:type :mouseMoved :info [x y]})))))\r\n          (.parent canvas \"container\"))))\r\n    \r\n    (set! (.-draw p5)\r\n      (fn []\r\n        (.fill p5 255)\r\n        (.rect p5 0 0 600 300)\r\n        (when model\r\n          (dorun\r\n            (w/prewalk \r\n              (fn [v]\r\n                (if-not (map? v)\r\n                  v\r\n                  (let [{[y x] :id} v\r\n                        txt (get-in model [:data y x])]\r\n                    (cond\r\n                      (some (partial = (:state v)) [:open :wait])\r\n                      (do\r\n                        (.fill p5 255)\r\n                        (.rect p5 (* 100 x) (* 100 y) 100 100)\r\n                        (.fill p5 255 0 0)\r\n                        (.text p5 txt (+ 50 (* 100 x)) (+ 50 (* 100 y))))\r\n                      \r\n                      (= :pass (:state v))\r\n                      (do\r\n                        (.fill p5 0 255 0)\r\n                        (.rect p5 (* 100 x) (* 100 y) 100 100)\r\n                        (.fill p5 255 0 0)\r\n                        (.text p5 txt (+ 50 (* 100 x)) (+ 50 (* 100 y))))\r\n                      \r\n                      :else\r\n                      (do \r\n                        (.fill p5 255 0 0)\r\n                        (.rect p5 (* 100 x) (* 100 y) 100 100))))))\r\n              (:view model))))))))          \r\n\r\n(main)\r\n"]}