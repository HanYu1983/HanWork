{"version":3,"sources":["app3/system/ai.cljs"],"mappings":";;;;AAKA,AAAA,AAAKA;AAGL,AAAA,AAAAC,AAAAC,AAAUS;AAAV,AAAA,AAAAR,AAAAC;AAAAC,AAAA,AAAAC,AAAAJ;AAAA,AAAA,AAAA,AAAAK,AAAA;AAAAC,AAAAH;AAAA,AAAA,AAAAF,AAAAA,AAAAI,AAAAC,AAAAL,AAAAI,AAAAC;;AAAA,AAAAC,AAAA,AAAAC,AAAAR;AAAA,AAEE,AAAA,AAAAU,AAAA,AAAAC,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAb,AAASc;AAAT,AAAA,AACQ,AAAMC,AAAQ,AAACC,AAAI,AAAA,AAACC,AAAQC,AAAiClB,AAAOc;AAC9DK,AAAU,AAACC,AAAI,AAACH,AAAQI,AAAkCtB,AAAUC,AAAOe,AAAQD;AADzF,AAEE,AAAA,AAACQ,AAAOtB,AAAgB,AAACY,AAAQW,AAAQ,AAACC,AAAOV,AAAMK;;AALnEnB;;;AAQA,AAAA,AAAAA,AAAAC,AAAU6B;AAAV,AAAA,AAAAL,AAAAtB;AAAAuB,AAAA,AAAArB,AAAAJ;AAAA,AAAA,AAAA,AAAA0B,AAAA;AAAAC,AAAAF;AAAA,AAAA,AAAAD,AAAAA,AAAAE,AAAAC,AAAAH,AAAAE,AAAAC;;AAAA,AAAAC,AAAA,AAAApB,AAAAR;AAAA,AAEE,AAAA8B,AAAA,AAAA,AAAA/B;AAAAgC,AAAA,AAAArB,AAAA,AAAAC,AAAAC,AAAA,AAAA,AAAAkB;AAAAE,AAAA,AAAAjB,AAAA;AAAAkB;AAAA,AAAA,AAAAC,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAAE,AAAAC,AAAAH,AAAAA;AAAAI,AAAAJ;AAAA,AAAAK,AAAAL,AAAA,AAAUM;AAAV,AACS,AAAAC,AAAkB,AAAA,AAAaD;AAA/B,AAAAE,AAAAD,AAAA,AAAA,AAAOE;AAAP,AAAAD,AAAAD,AAAA,AAAA,AAAYG;AAAZ,AACE,AAAI,AAAAC,AAAKD;AAAL,AAAA,AAAAC;AAAUF;;AAAVE;;;AACF,AAAA,AAAA,AAAA,AAAA,AAAA,AAAMC;AAAN,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAEMC;AAKAC,AAAa,AAAA,AAACjC,AAAIkC,AAAMH,AAAWC,AACtB,AAACG,AAAOC,AACR,AAACzC,AAAO,AAAC0C,AAAKC,AAAIC,AAClB,AAAA,AAACC;AAVpB,AAWE,AAAA,AAAClC,AAAOiB,AAAe;AAAKP;AAAL,AACMA,AACA,AAACyB,AAAuBR,AACxB,AAAA,AAACS,AAAoB,AAACb,AAAAA,AAAAA,AAAKE,AAAAA,AAAY,AAACH,AAAAA,AAAAA,AAAKI,AAAAA;;;;AAC5ET;;;AAlBbP;AAAA,AAAA,AAAAV,AAAAtB,AAAA,AAAA,AAAAY,AAAAW,AAAA,AAAAC,AAAAQ,AAAAC;;AAFFjC;;;AAuBA,AAAA,AAAAA,AAAAC,AAAUuF;AAAV,AAAA,AAAA7B,AAAAxD;AAAAyD,AAAA,AAAAvD,AAAAJ;AAAA,AAAA,AAAA,AAAA4D,AAAA;AAAAC,AAAAF;AAAA,AAAA,AAAAD,AAAAA,AAAAE,AAAAC,AAAAH,AAAAE,AAAAC;;AAAA,AAAAC,AAAA,AAAAtD,AAAAR;AAAA,AAGE,AAAA,AAAAU,AAAA,AAAAC,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAb,AAASc;AAAT,AAAA,AACQ,AAAMK,AAMe,AAACC,AAAI;AAAK6E,AAAKxD;AAAV,AACE,AAAA,AAAA,AAACyD,AAAMD,AAAaxD;;AAN3B,AAACzB,AAAI,AAOAF;AAPA2E;AAAA,AAAA,AAAAC,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAtD,AAAA,AAAAsD,AAAA,AAAA,AAAA,AAAA,AAAArD,AAAAC,AAAAoD,AAAAA;AAAAA,AAA6BjD;AAA7B,AAAAD,AAAAkD,AAAA,AAAaC;AAAb,AACE,AAAMC,AAAS,AAAA,AACE,AAAK,AAAA,AAAA,AAAA,AAACC,AAAoBF,AAAaG,AAClC;AAAKC;AAAL,AAAQ,AAAA,AAAGA;;;;AAFjC,AAGE,AAACC,AAAUvD,AAAMmD;;AAL1B,AAAA,AAAC5E,AAAWF;AAAjC,AASE,AAAA,AAACQ,AAAOtB,AAAgB,AAACY,AAAQW,AAAQ,AAACC,AAAOV,AAAMK;;AAbnE,AAAA,AAAA6C,AAAA;AAAAC,AAAAL;AAAA,AAAA,AAAAD,AAAAA,AAAAK,AAAAC,AAAAN,AAAAK,AAAAC;;AAAA,AAAAC,AAAA,AAAAzD,AAAAR;AAAA,AAgBE,AAAA,AAAAU,AAAA,AAAAC,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAb,AAASc;AAAT,AAAA,AACQ,AAAMK,AAEe,AAAA,AAACC;AAADiF,AAAAC;AAAA,AAAM,AAAAD,AAAA,AAAA,AAAAC,AAACJ;;AADP,AAAA,AAAClF,AAC2BF;AAD5BqF;AAAA,AAAM,AAAAA,AAACH,AAAYI;;AADnB,AAAA,AAACpF,AAAWF;AAAjC,AAGE,AAAA,AAACQ,AAAOtB,AAAgB,AAACY,AAAQW,AAAQ,AAACC,AAAOV,AAAMK;;AApBnE,AAAA,AAAAgD,AAAA;AAAAC,AAAAR;AAAA,AAAA,AAAAD,AAAAA,AAAAQ,AAAAC,AAAAT,AAAAQ,AAAAC;;AAAA,AAAAC,AAAA,AAAA5D,AAAAR;AAAA,AAAA0C,AAAA0B,AAAA,AAAA,AAsBS4B;AAtBT,AAuBE,AAAMA,AAAK,AAAC5F,AAAM,AAAA,AAACM;AAAD4F;AAAA,AAAS,AAACV,AAAE,AAAA,AAAAU,AAAQ,AAAA,AAAKN;;AAAO,AAAA,AAAWjG;AACvDwG,AAAM,AAAA,AAAA,AAACtF,AAAAA,AAAAA,AAAiClB,AAAAA,AAAMiG,AAAAA;AADpD,AAEE,AAAIA;AACF,AAAMQ,AAAS,AAAA,AAAA,AAACP,AAAMD,AAAa,AAACD,AAAU,AAAA,AAAQC,AAAM;AAAKF;AAAL,AAAQ,AAAA,AAAGA;;;AACjEW,AAAU,AAAA,AAAA,AAACR,AAAMM,AAAc,AAACR,AAAU,AAAA,AAAQQ,AAAO;AAAKT;AAAL,AAAQ,AAAA,AAAGA;;;AAD1E,AAEE,AAAA,AAACzE,AAAOtB,AAAgB,AAAA,AAACY,AAAQW,AAAS0E,AAAKQ,AAASD,AAAME;;AAChE1G;;;AA7BN,AAAA,AAAAsE,AAAA;AAAAC,AAAAX;AAAA,AAAA,AAAAD,AAAAA,AAAAW,AAAAC,AAAAZ,AAAAW,AAAAC;;AAAA,AAAAC,AAAA,AAAA/D,AAAAR;AAAA,AAAA0C,AAAA6B,AAAA,AAAA,AAgCkByB;AAhClB,AAAAtD,AAAA6B,AAAA,AAAA,AAgCuBmC;AAhCvB,AAiCE,AAAMV,AAAK,AAAC5F,AAAM,AAAA,AAACM;AAADiG;AAAA,AAAS,AAACf,AAAE,AAAA,AAAAe,AAAQ,AAAA,AAAKX;;AAAO,AAAA,AAAWjG;AAA7D,AACE,AAAIiG;AACF,AAAMQ,AAAS,AAAA,AAAA,AAACP,AAAMD,AAAa,AAACD,AAAU,AAAA,AAAQC,AAAM;AAAKF;AAAL,AAAQ,AAAGA,AAAE,AAAA,AAAGY;;;AAA5E,AACE,AAAA,AAACrF,AAAOtB,AAAgB,AAAA,AAACY,AAAQW,AAAS0E,AAAKQ;;AACjDzG;;;AArCN,AAAA,AAAAyE,AAAA;AAAAC,AAAAd;AAAA,AAAA,AAAAD,AAAAA,AAAAc,AAAAC,AAAAf,AAAAc,AAAAC;;AAAA,AAAAC,AAAA,AAAAlE,AAAAR;AAAA,AAAA0C,AAAAgC,AAAA,AAAA,AAuCSsB;AAvCT,AAAAtD,AAAAgC,AAAA,AAAA,AAuCckC;AAvCd,AAAAlE,AAAAgC,AAAA,AAAA,AAuCqBmC;AAvCrB,AAAAnE,AAAAgC,AAAA,AAAA,AAuCmCoC;AAvCnC,AAwCE/G;;AAxCF,AAAA,AAAA4E,AAAA;AAAAC,AAAAjB;AAAA,AAAA,AAAAD,AAAAA,AAAAiB,AAAAC,AAAAlB,AAAAiB,AAAAC;;AAAA,AAAAC,AAAA,AAAArE,AAAAR;AAAA,AAAA0C,AAAAmC,AAAA,AAAA,AA0CyBkC;AA1CzB,AAAArE,AAAAmC,AAAA,AAAA,AA0CoCmC;AA1CpC,AA2CE,AAAMhB,AAAK,AAAC5F,AAAM,AAAA,AAACM;AAADuG;AAAA,AAAS,AAACrB,AAAE,AAAA,AAAAqB,AAAQ,AAAA,AAAKF;;AAAa,AAAA,AAAWhH;AAAnE,AACE,AAAIiG;AACF,AAAMkB,AAAS,AAAG,AAAA,AAAKlB,AAAM,AAAA,AAAKe;AAC5BP,AAAS,AAAA,AAAA,AAACP,AAAMD,AAAa,AAACD,AAAU,AAAA,AAAQC,AAAM;AAAKF;AAAL,AAAQ,AAAGA,AAAE,AAAA,AAAMoB;;;AAD/E,AAEE,AAAA,AAAC7F,AAAOtB,AAAgB,AAAA,AAACY,AAAQW,AAAS0E,AAAKQ;;AACjDzG;;;AAhDN,AAAA,AAAA+E,AAAA;AAAAC,AAAApB;AAAA,AAAA,AAAAD,AAAAA,AAAAoB,AAAAC,AAAArB,AAAAoB,AAAAC;;AAAA,AAAAC,AAAA,AAAAxE,AAAAR;AAAA,AAAA0C,AAAAsC,AAAA,AAAA,AAkDwBgB;AAlDxB,AAAAtD,AAAAsC,AAAA,AAAA,AAkD6B4B;AAlD7B,AAmDE7G;;AAnDF,AAAA,AAAAkF,AAAA;AAAAC,AAAAvB;AAAA,AAAA,AAAAD,AAAAA,AAAAuB,AAAAC,AAAAxB,AAAAuB,AAAAC;;AAAA,AAAAC,AAAA,AAAA3E,AAAAR;AAAA,AAAA0C,AAAAyC,AAAA,AAAA,AAqDwBgC;AArDxB,AAsDE,AAAMC,AAAW,AAACrG,AAAIsG,AAAOF;AACvBG,AAAe,AAACvG,AAAI,AAGL,AAACL,AAAO,AAAC0C,AAAKC,AAAIC;AAHRiE;AAAL,AACE,AAACnH,AAAM,AAACM,AAAO;AAAK8G;AAAL,AAAQ,AAAC5B,AAAE,AAAA,AAAA,AAAA,AAAC6B,AAAOF,AAAoB,AAAA,AAAKC;;AAAK,AAAA,AAAWzH;;AAC7EqH;AAEpBM,AAAU,AAACC,AAAS9B,AAASyB;AAC7BzG,AAAM,AAAC+G,AAAKF;AACZG,AAAS,AAAC9G,AAAI+G,AAAM,AAAC7E,AAAKyE;AAC1BxG,AAIe,AAACC,AAAI;AAAK6E,AAAKxD;AAAV,AACE,AAAA,AAAA,AAACyD,AAAMD,AAAaxD;;AAJ3B,AAACrB,AAAI,AAKAN;AALKkH,AAAIvF;AAAT,AACE,AAACuD,AAAUvD,AAAM;AAAKsD;AAAL,AAAQ,AAAGA,AAAE,AAAA,AAAMiC;;;;AAF3C,AAAA,AAAChH,AAAWF,AAGPgH;AAX1B,AAeE,AAAA,AAACxG,AAAOtB,AAAgB,AAACY,AAAQW,AAAQ,AAACC,AAAOV,AAAMK;;AArE3D,AAAA,AAAAkE,AAAA;AAAAC,AAAA1B;AAAA,AAAA,AAAAD,AAAAA,AAAA0B,AAAAC,AAAA3B,AAAA0B,AAAAC;;AAAA,AAAAC,AAAA,AAAA9E,AAAAR;AAAA,AAAA0C,AAAA4C,AAAA,AAAA,AAuEkB0C;AAvElB,AAwEE,AAAA,AAAAtH,AAAA,AAAAC,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAb,AAASkI;AAAT,AAAA,AACQ,AAAMC,AAAQ,AAAA,AAACnH;AAADoH;AAAA,AAAM,AAAAA,AAAA,AAAA,AAAA,AAACV;;AAAsBO;AACrCI,AAAQ,AAACT,AAAS9B,AAASqC;AAC3BG,AAAI,AAACT,AAAKQ;AACVE,AAAK,AAACvH,AAAI+G,AAAM,AAAC7E,AAAKmF;AACtBvH,AAAM,AAACE,AAAI;AAAK+F;AAAL,AACE,AAAI,AAAA,AAACpG,AACDN;AADAmI;AAAA,AAAS,AAAC3C,AAAE,AAAA,AAAA2C,AAAQzB;;AAAQmB;;AAElCI;AACXnH,AAAU,AAACC,AACA;AAAK6E,AAAK+B;AAAV,AACE,AAAA,AAAA,AAAC9B,AAAMD,AAAa,AAACD,AAAU,AAAA,AAAQC,AACR;AAAKF;AAAL,AAAQ,AAAGA,AAAE,AAAG,AAAA,AAAGiC;;;;AACpDlH,AACAyH;AAbjB,AAcE,AAAA,AAACjH,AAAOtB,AAAgB,AAACY,AAAQW,AAAQ,AAACC,AAAOV,AAAMK;;AAvFnEnB","names":["app3.system.ai/brainMode","model","event","pred__36365","cljs.core/=","expr__36366","cljs.core/first","G__36368","G__36369","vec__36371","cljs.core/rest","app3.system.ai/updateBrain","cljs.core.filter.cljs$core$IFn$_invoke$arity$2","cljs.core.partial.cljs$core$IFn$_invoke$arity$2","app3.tool/checkProperty","plyrs","targets","cljs.core.map.cljs$core$IFn$_invoke$arity$2","cljs.core.partial.cljs$core$IFn$_invoke$arity$3","app3.interface.player/target","nextPlyrs","cljs.core.map.cljs$core$IFn$_invoke$arity$3","app3.interface.player/updateBrain","cljs.core.update.cljs$core$IFn$_invoke$arity$3","cljs.core/replace","cljs.core/zipmap","pred__36375","expr__36376","G__36378","G__36379","vec__36380","app3.system.ai/syncBrainAction","entities","origin","next","p__36383","map__36384","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","entity","cljs.core.get.cljs$core$IFn$_invoke$arity$2","brain","vec__36387","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","move","hand","and__4120__auto__","handAction","moveAction","actions","cljs.core/vals","cljs.core.reduce.cljs$core$IFn$_invoke$arity$2","cljs.core/concat","cljs.core.comp.cljs$core$IFn$_invoke$arity$2","cljs.core/not","cljs.core/nil?","cljs.core.into.cljs$core$IFn$_invoke$arity$2","clojure.set.difference.cljs$core$IFn$_invoke$arity$2","clojure.set.union.cljs$core$IFn$_invoke$arity$2","pred__36400","expr__36401","G__36403","G__36404","vec__36405","G__36416","G__36417","vec__36418","G__36421","G__36422","vec__36423","G__36426","G__36427","vec__36428","G__36431","G__36432","vec__36433","G__36436","G__36437","vec__36438","G__36441","G__36442","vec__36443","G__36446","G__36447","vec__36448","G__36451","G__36452","vec__36453","app3.system.ai/brainReward","p__36409","map__36410","lastAction","updateFn","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","cljs.core/identity","o","app3.qlearning/updateR","plyr","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic","p1__36391#","cljs.core/inc","p1__36392#","p2__36393#","p1__36394#","enemy","nextPlyr","nextEnemy","len","p1__36395#","weapon","isFireSuccess","target","originPlyr","healing","p1__36396#","hpOffset","collides","hitBullets","cljs.core/second","fromPlyrs","bullet","e","cljs.core.get_in.cljs$core$IFn$_invoke$arity$2","fromGroup","cljs.core/group-by","cljs.core/keys","hitCount","cljs.core/count","cnt","bullets","brains","fromIds","p1__36398#","idGroup","ids","cnts","p1__36399#"],"sourcesContent":["(ns app3.system.ai\r\n  (:require-macros [app3.macros :as m])\r\n  (:require [app3.interface.player]\r\n            [app3.qlearning :as q]))\r\n\r\n(def brainMode :fast)\r\n\r\n\r\n(m/defsys updateBrain\r\n  :update []\r\n  (m/lete [plyrs [:brain]]\r\n          (let [targets (map (partial app3.interface.player/target nil model) plyrs)\r\n                nextPlyrs (map (partial app3.interface.player/updateBrain brainMode model) targets plyrs)]\r\n            (update model :entities (partial replace (zipmap plyrs nextPlyrs))))))\r\n\r\n\r\n(m/defsys syncBrainAction\r\n  :update []\r\n  (m/docom {brain :brain}\r\n           (let [[move hand] (:lastAction brain)]\r\n             (if (and hand move)\r\n               (let [handAction {:normal nil\r\n                                 :attack :fire}\r\n                     moveAction {:normal nil\r\n                                 :attack :seek\r\n                                 :evade :evade\r\n                                 :findWeapon :seekWeapon\r\n                                 :findHealing :seekHealing}\r\n                     actions (->> (map vals [handAction moveAction])\r\n                                  (reduce concat)\r\n                                  (filter (comp not nil?))\r\n                                  (into #{}))]\r\n                 (update entity :action (fn [origin]\r\n                                          (-> origin\r\n                                              (clojure.set/difference actions)\r\n                                              (clojure.set/union #{(hand handAction) (move moveAction)})))))\r\n               entity))))\r\n\r\n\r\n(m/defsys brainReward\r\n  ; change to :update for test\r\n  :update2 []\r\n  (m/lete [plyrs [:brain]]\r\n          (let [nextPlyrs (->> (map :brain plyrs)\r\n                               (map (fn [{:keys [lastAction] :as brain}]\r\n                                      (let [updateFn (cond\r\n                                                       (not (= [:normal :normal] lastAction)) identity\r\n                                                       true (fn [o] (+ o 1000)))]\r\n                                        (q/updateR brain updateFn))))\r\n                               (map (fn [plyr brain]\r\n                                      (merge plyr {:brain brain}))\r\n                                    plyrs))]\r\n            (update model :entities (partial replace (zipmap plyrs nextPlyrs)))))\r\n\r\n  :update []\r\n  (m/lete [plyrs [:brain]]\r\n          (let [nextPlyrs (->> (map :brain plyrs)\r\n                               (map #(q/updateR % inc))\r\n                               (map #(merge % {:brain %2}) plyrs))]\r\n            (update model :entities (partial replace (zipmap plyrs nextPlyrs)))))\r\n\r\n  :died [plyr]\r\n  (let [plyr (first (filter #(= (:id %) (:id plyr)) (:entities model)))\r\n        enemy (app3.interface.player/target nil model plyr)]\r\n    (if plyr\r\n      (let [nextPlyr (merge plyr {:brain (q/updateR (:brain plyr) (fn [o] (- o 1000)))})\r\n            nextEnemy (merge enemy {:brain (q/updateR (:brain enemy) (fn [o] (+ o 0)))})]\r\n        (update model :entities (partial replace {plyr nextPlyr enemy nextEnemy})))\r\n      model))\r\n\r\n  ; \u6c92\u6709\u4f7f\u7528\r\n  :moveCost_xxxx [plyr len]\r\n  (let [plyr (first (filter #(= (:id %) (:id plyr)) (:entities model)))]\r\n    (if plyr\r\n      (let [nextPlyr (merge plyr {:brain (q/updateR (:brain plyr) (fn [o] (- o (/ len 100))))})]\r\n        (update model :entities (partial replace {plyr nextPlyr})))\r\n      model))\r\n\r\n  :fire [plyr weapon isFireSuccess target]\r\n  model\r\n\r\n  :playerCollideHealing [originPlyr healing]\r\n  (let [plyr (first (filter #(= (:id %) (:id originPlyr)) (:entities model)))]\r\n    (if plyr\r\n      (let [hpOffset (- (:hp plyr) (:hp originPlyr))\r\n            nextPlyr (merge plyr {:brain (q/updateR (:brain plyr) (fn [o] (+ o (* 10 hpOffset))))})]\r\n        (update model :entities (partial replace {plyr nextPlyr})))\r\n      model))\r\n\r\n  :playerCollideWeapon [plyr weapon]\r\n  model\r\n\r\n  :bulletCollidePlayer [collides]\r\n  (let [hitBullets (map second collides)\r\n        fromPlyrs (->> (map (fn [bullet]\r\n                              (first (filter (fn [e] (= (get-in bullet [:from :id]) (:id e))) (:entities model))))\r\n                            hitBullets)\r\n                       (filter (comp not nil?)))\r\n        fromGroup (group-by identity fromPlyrs)\r\n        plyrs (keys fromGroup)\r\n        hitCount (map count (vals fromGroup))\r\n        nextPlyrs (->> (map :brain plyrs)\r\n                       (map (fn [cnt brain]\r\n                              (q/updateR brain (fn [o] (+ o (* 10 cnt)))))\r\n                            hitCount)\r\n                       (map (fn [plyr brain]\r\n                              (merge plyr {:brain brain}))\r\n                            plyrs))]\r\n    (update model :entities (partial replace (zipmap plyrs nextPlyrs))))\r\n\r\n  :bulletHitWall [bullets]\r\n  (m/lete [brains [:brain]]\r\n          (let [fromIds (map #(get-in % [:from :id]) bullets)\r\n                idGroup (group-by identity fromIds)\r\n                ids (keys idGroup)\r\n                cnts (map count (vals idGroup))\r\n                plyrs (map (fn [target]\r\n                             (-> (filter #(= (:id %) target) brains)\r\n                                 first))\r\n                           ids)\r\n                nextPlyrs (map\r\n                           (fn [plyr cnt]\r\n                             (merge plyr {:brain (q/updateR (:brain plyr)\r\n                                                            (fn [o] (+ o (- (* cnt 10)))))}))\r\n                           plyrs\r\n                           cnts)]\r\n            (update model :entities (partial replace (zipmap plyrs nextPlyrs))))))\r\n"]}