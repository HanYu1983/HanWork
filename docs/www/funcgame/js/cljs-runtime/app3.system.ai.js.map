{"version":3,"sources":["app3/system/ai.cljs"],"mappings":"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","names":["app3.system.ai/brainMode","model","event","pred__36331","cljs.core/=","expr__36332","cljs.core/first","G__36334","G__36335","vec__36336","cljs.core/rest","app3.system.ai/updateBrain","cljs.core.filter.cljs$core$IFn$_invoke$arity$2","cljs.core.partial.cljs$core$IFn$_invoke$arity$2","app3.tool/checkProperty","plyrs","targets","cljs.core.map.cljs$core$IFn$_invoke$arity$2","cljs.core.partial.cljs$core$IFn$_invoke$arity$3","app3.interface.player/target","nextPlyrs","cljs.core.map.cljs$core$IFn$_invoke$arity$3","app3.interface.player/updateBrain","cljs.core.update.cljs$core$IFn$_invoke$arity$3","cljs.core/replace","cljs.core/zipmap","pred__36339","expr__36340","G__36342","G__36343","vec__36344","app3.system.ai/syncBrainAction","entities","origin","next","p__36347","map__36348","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","entity","cljs.core.get.cljs$core$IFn$_invoke$arity$2","brain","vec__36350","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","move","hand","and__4120__auto__","handAction","moveAction","actions","cljs.core/vals","cljs.core.reduce.cljs$core$IFn$_invoke$arity$2","cljs.core/concat","cljs.core.comp.cljs$core$IFn$_invoke$arity$2","cljs.core/not","cljs.core/nil?","cljs.core.into.cljs$core$IFn$_invoke$arity$2","clojure.set.difference.cljs$core$IFn$_invoke$arity$2","clojure.set.union.cljs$core$IFn$_invoke$arity$2","pred__36436","expr__36437","G__36439","G__36440","vec__36441","G__36460","G__36461","vec__36462","G__36491","G__36492","vec__36500","G__36538","G__36539","vec__36540","G__36551","G__36552","vec__36559","G__36563","G__36564","vec__36588","G__36673","G__36674","vec__36676","G__36680","G__36681","vec__36685","G__36710","G__36711","vec__36714","app3.system.ai/brainReward","p__36450","map__36451","lastAction","updateFn","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","cljs.core/identity","o","app3.qlearning/updateR","plyr","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic","p1__36418#","cljs.core/inc","p1__36419#","p2__36420#","p1__36421#","enemy","nextPlyr","nextEnemy","len","p1__36426#","weapon","isFireSuccess","target","originPlyr","healing","p1__36429#","hpOffset","collides","hitBullets","cljs.core/second","fromPlyrs","bullet","e","cljs.core.get_in.cljs$core$IFn$_invoke$arity$2","fromGroup","cljs.core/group-by","cljs.core/keys","hitCount","cljs.core/count","cnt","bullets","brains","fromIds","p1__36430#","idGroup","ids","cnts","p1__36431#"],"sourcesContent":["(ns app3.system.ai\n  (:require-macros [app3.macros :as m])\n  (:require [app3.interface.player]\n            [app3.qlearning :as q]))\n\n(def brainMode :fast)\n\n\n(m/defsys updateBrain\n  :update []\n  (m/lete [plyrs [:brain]]\n          (let [targets (map (partial app3.interface.player/target nil model) plyrs)\n                nextPlyrs (map (partial app3.interface.player/updateBrain brainMode model) targets plyrs)]\n            (update model :entities (partial replace (zipmap plyrs nextPlyrs))))))\n\n\n(m/defsys syncBrainAction\n  :update []\n  (m/docom {brain :brain}\n           (let [[move hand] (:lastAction brain)]\n             (if (and hand move)\n               (let [handAction {:normal nil\n                                 :attack :fire}\n                     moveAction {:normal nil\n                                 :attack :seek\n                                 :evade :evade\n                                 :findWeapon :seekWeapon\n                                 :findHealing :seekHealing}\n                     actions (->> (map vals [handAction moveAction])\n                                  (reduce concat)\n                                  (filter (comp not nil?))\n                                  (into #{}))]\n                 (update entity :action (fn [origin]\n                                          (-> origin\n                                              (clojure.set/difference actions)\n                                              (clojure.set/union #{(hand handAction) (move moveAction)})))))\n               entity))))\n\n\n(m/defsys brainReward\n  ; change to :update for test\n  :update2 []\n  (m/lete [plyrs [:brain]]\n          (let [nextPlyrs (->> (map :brain plyrs)\n                               (map (fn [{:keys [lastAction] :as brain}]\n                                      (let [updateFn (cond\n                                                       (not (= [:normal :normal] lastAction)) identity\n                                                       true (fn [o] (+ o 1000)))]\n                                        (q/updateR brain updateFn))))\n                               (map (fn [plyr brain]\n                                      (merge plyr {:brain brain}))\n                                    plyrs))]\n            (update model :entities (partial replace (zipmap plyrs nextPlyrs)))))\n\n  :update []\n  (m/lete [plyrs [:brain]]\n          (let [nextPlyrs (->> (map :brain plyrs)\n                               (map #(q/updateR % inc))\n                               (map #(merge % {:brain %2}) plyrs))]\n            (update model :entities (partial replace (zipmap plyrs nextPlyrs)))))\n\n  :died [plyr]\n  (let [plyr (first (filter #(= (:id %) (:id plyr)) (:entities model)))\n        enemy (app3.interface.player/target nil model plyr)]\n    (if plyr\n      (let [nextPlyr (merge plyr {:brain (q/updateR (:brain plyr) (fn [o] (- o 1000)))})\n            nextEnemy (merge enemy {:brain (q/updateR (:brain enemy) (fn [o] (+ o 0)))})]\n        (update model :entities (partial replace {plyr nextPlyr enemy nextEnemy})))\n      model))\n\n  :moveCost_xxxx [plyr len]\n  (let [plyr (first (filter #(= (:id %) (:id plyr)) (:entities model)))]\n    (if plyr\n      (let [nextPlyr (merge plyr {:brain (q/updateR (:brain plyr) (fn [o] (- o (/ len 100))))})]\n        (update model :entities (partial replace {plyr nextPlyr})))\n      model))\n\n  :fire [plyr weapon isFireSuccess target]\n  model\n\n  :playerCollideHealing [originPlyr healing]\n  (let [plyr (first (filter #(= (:id %) (:id originPlyr)) (:entities model)))]\n    (if plyr\n      (let [hpOffset (- (:hp plyr) (:hp originPlyr))\n            nextPlyr (merge plyr {:brain (q/updateR (:brain plyr) (fn [o] (+ o (* 10 hpOffset))))})]\n        (update model :entities (partial replace {plyr nextPlyr})))\n      model))\n\n  :playerCollideWeapon [plyr weapon]\n  model\n\n  :bulletCollidePlayer [collides]\n  (let [hitBullets (map second collides)\n        fromPlyrs (->> (map (fn [bullet]\n                              (first (filter (fn [e] (= (get-in bullet [:from :id]) (:id e))) (:entities model))))\n                            hitBullets)\n                       (filter (comp not nil?)))\n        fromGroup (group-by identity fromPlyrs)\n        plyrs (keys fromGroup)\n        hitCount (map count (vals fromGroup))\n        nextPlyrs (->> (map :brain plyrs)\n                       (map (fn [cnt brain]\n                              (q/updateR brain (fn [o] (+ o (* 10 cnt)))))\n                            hitCount)\n                       (map (fn [plyr brain]\n                              (merge plyr {:brain brain}))\n                            plyrs))]\n    (update model :entities (partial replace (zipmap plyrs nextPlyrs))))\n\n  :bulletHitWall [bullets]\n  (m/lete [brains [:brain]]\n          (let [fromIds (map #(get-in % [:from :id]) bullets)\n                idGroup (group-by identity fromIds)\n                ids (keys idGroup)\n                cnts (map count (vals idGroup))\n                plyrs (map (fn [target]\n                             (-> (filter #(= (:id %) target) brains)\n                                 first))\n                           ids)\n                nextPlyrs (map\n                           (fn [plyr cnt]\n                             (merge plyr {:brain (q/updateR (:brain plyr)\n                                                            (fn [o] (+ o (- (* cnt 10)))))}))\n                           plyrs\n                           cnts)]\n            (update model :entities (partial replace (zipmap plyrs nextPlyrs))))))\n"]}