{"version":3,"sources":["app/t1/main.cljs"],"mappings":"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","names":["app.t1.main/data","app.t1.main/model","app.t1.main/evt","cljs.core.async.chan.cljs$core$IFn$_invoke$arity$0","canvas","js/document","c__30213__auto__","cljs.core.async.chan.cljs$core$IFn$_invoke$arity$1","cljs.core.async.impl.dispatch/run","f__30214__auto__","switch__30004__auto__","state_37939","state_val_37940","inst_37933","inst_37934","inst_37935","cljs.core/PersistentHashMap","cljs.core.async.impl.ioc-helpers/put!","inst_37937","cljs.core.async.impl.ioc-helpers/return-chan","statearr-37951","state-machine__30005__auto__","ret-value__30006__auto__","result__30007__auto__","cljs.core/keyword-identical?","e37961","js/Object","ex__30008__auto__","statearr-37966","cljs.core.async.impl.ioc-helpers/process-exception","state__30215__auto__","statearr-37968","cljs.core.async.impl.ioc-helpers/USER-START-IDX","cljs.core.async.impl.ioc-helpers/run-state-machine-wrapped","state_37986","state_val_37987","inst_37980","inst_37981","inst_37982","inst_37984","statearr-38006","e38013","statearr-38014","statearr-38020","evt2","rect","x","y","state_38040","state_val_38041","inst_38031","inst_38032","cljs.core/PersistentVector","inst_38033","inst_38034","inst_38035","inst_38036","inst_38038","statearr-38043","e38045","statearr-38058","statearr-38061","js/setInterval","state_38070","state_val_38071","inst_38063","inst_38065","inst_38066","inst_38068","statearr-38073","e38074","statearr-38075","statearr-38077","state_38186","state_val_38188","inst_38169","statearr-38209","inst_38082","inst_38083","inst_38084","inst_38085","inst_38086","inst_38087","inst_38088","inst_38089","inst_38090","inst_38091","inst_38092","inst_38093","inst_38094","inst_38095","inst_38096","inst_38097","inst_38098","inst_38101","inst_38103","inst_38104","inst_38105","inst_38106","inst_38107","inst_38108","inst_38109","inst_38110","inst_38111","inst_38112","inst_38113","cljs.core/PersistentHashSet","inst_38114","inst_38115","inst_38116","statearr-38214","statearr-38215","inst_38125","inst_38121","inst_38126","statearr-38220","statearr-38225","statearr-38226","tmp38197","statearr-38230","statearr-38231","inst_38165","statearr-38232","inst_38131","statearr-38238","statearr-38239","inst_38171","inst_38151","statearr-38244","statearr-38245","inst_38118","statearr-38255","cljs.core.async.impl.ioc-helpers/take!","inst_38144","inst_38145","inst_38146","inst_38147","statearr-38256","statearr-38257","inst_38140","statearr-38262","statearr-38267","inst_38128","statearr-38276","statearr-38292","inst_38155","inst_38156","inst_38157","inst_38158","statearr-38308","statearr-38309","inst_38163","statearr-38313","inst_38167","statearr-38314","inst_38133","inst_38134","inst_38135","inst_38136","inst_38137","statearr-38315","statearr-38316","statearr-38320","e38322","statearr-38323","statearr-38330","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","app.t1.main/step","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic","p__38333","vec__38334","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","app.t1.main/isPointInCircle","p","radius","cljs.core.map.cljs$core$IFn$_invoke$arity$3","cljs.core/-","cljs.core.repeat.cljs$core$IFn$_invoke$arity$1","cljs.core.take.cljs$core$IFn$_invoke$arity$2","cljs.core.apply.cljs$core$IFn$_invoke$arity$3","cljs.core/map","cljs.core/*","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/+","app.t1.main/checkAnswer","ctx","s1","s2","vec__38340","vec__38343","_","a1","cljs.core.get_in.cljs$core$IFn$_invoke$arity$2","a2","idx","cljs.core.map.cljs$core$IFn$_invoke$arity$2","cljs.core.partial.cljs$core$IFn$_invoke$arity$2","cljs.core/vector","cljs.core.range.cljs$core$IFn$_invoke$arity$0","cljs.core.filter.cljs$core$IFn$_invoke$arity$2","p__38591","vec__38592","selected","cljs.core/ffirst","p__38603","vec__38604","cljs.core/not","pass","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","app.t1.main/sketchProc","pc","app.t1.main/pg","app.t1.main/circleRadius","vec__38618","mousePos","mx","my","cljs.core.dorun.cljs$core$IFn$_invoke$arity$1","seq__38629","cljs.core/seq","chunk__38630","count__38631","i__38632","temp__5735__auto__","cljs.core/chunked-seq?","c__4550__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","cljs.core/first","cljs.core/next","c","cljs.core.concat.cljs$core$IFn$_invoke$arity$2","vec__38646","vec__38657","isLeft","cljs.core/some","cljs.core/=","a","radius2","showText","showTextOffsetX","temp__5733__auto__","vec__38660","seq__38663","chunk__38664","count__38665","i__38666","line","vec__38694","vec__38698","vec__38701","vec__38711","vec__38714","vec__38717","cljs.core.nth.cljs$core$IFn$_invoke$arity$2","x2","y2","js/Processing"],"sourcesContent":["(ns app.t1.main\r\n  (:require-macros\r\n    [cljs.core.async.macros :as am])\r\n  (:require [cljs.core.async :as a]))\r\n; \u5b9a\u7fa9\u904a\u6232\u5167\u5bb9\r\n(def data {:fish [\"fish\" \"\u9b5a\"]\r\n           :family [\"family\" \"\u5bb6\u4eba\"]\r\n           :rock [\"rock\" \"\u5ca9\u77f3\"]})\r\n; \u50b3\u905e\u8cc7\u6599\u7d66\u8996\u89ba\u7684\u5bb9\u5668\r\n(def model nil)\r\n; \u4e8b\u4ef6\u6d41\r\n(def evt (a/chan))\r\n; ===================\r\n; ==== \u5b9a\u7fa9\u6a21\u578b\u7aef =====\r\n; ===================\r\n; \u7d44\u6210\u4e8b\u4ef6\u6d41\r\n(let [canvas (.getElementById js/document \"canvas1\")]\r\n  ; \u6309\u4e0b\u4e8b\u4ef6\r\n  (.addEventListener canvas \"mousedown\"\r\n    (fn []\r\n      (am/go\r\n        (a/>! evt {:type :mousedown})))\r\n    false)\r\n  ; \u653e\u958b\u4e8b\u4ef6\r\n  (.addEventListener canvas \"mouseup\"\r\n    (fn []\r\n      (am/go\r\n        (a/>! evt {:type :mouseup})))\r\n    false)\r\n  ; \u79fb\u52d5\u4e8b\u4ef6\r\n  ; \u4e26\u8a18\u9304\u4f4d\u7f6e\r\n  (.addEventListener canvas \"mousemove\"\r\n    (fn [evt2]\r\n      (let [rect (.getBoundingClientRect canvas)\r\n            x (- (.-clientX evt2) (.-left rect))\r\n            y (- (.-clientY evt2) (.-top rect))]\r\n        (am/go\r\n          (a/>! evt {:type :mousemove :info [x y]}))))\r\n    false)\r\n  ; \u8ff4\u5708\u4e8b\u4ef6\r\n  (js/setInterval\r\n    (fn []\r\n      (am/go\r\n        (a/>! evt {:type :update})))\r\n    33))\r\n(declare step)\r\n; \u904a\u6232\u8ff4\u5708\r\n(am/go-loop [ctx {:mousePressed false\r\n                  :mousePos [0 0]\r\n                  :leftCircle [[50 50 20 :fish] [50 100 20 :family] [50 150 20 :rock]]\r\n                  :rightCircle [[150 50 20 :rock] [150 100 20 :fish] [150 150 20 :family]]\r\n                  :line nil\r\n                  :select1 nil\r\n                  :buildLine #{}}]\r\n  ; \u50b3\u9001\u8cc7\u6599\u7d66\u8996\u89ba\r\n  (set! model ctx)\r\n  ; \u8655\u7406\u5404\u7a2e\u4e8b\u4ef6\r\n  (let [e (a/<! evt)]\r\n    (condp = (:type e)\r\n      :update\r\n      (recur (step ctx))\r\n      \r\n      ; \u8a18\u9304\u6e38\u6a19\u4f4d\u7f6e\r\n      :mousemove\r\n      (recur (merge ctx {:mousePos (:info e)}))\r\n      \r\n      ; \u8a18\u9304\u6309\u9375\u72c0\u614b\r\n      :mouseup\r\n      (recur (merge ctx {:mousePressed false :mouseUp true}))\r\n      \r\n      ; \u8a18\u9304\u6309\u9375\u72c0\u614b\r\n      :mousedown\r\n      (recur (merge ctx {:mousePressed true :mouseDown true}))\r\n      \r\n      (recur ctx))))\r\n\r\n(defn isPointInCircle [p [x y radius]]\r\n  (->>\r\n       ; \u76f8\u5c0d\u5411\u91cf\r\n       (map - [x y] p)\r\n       ; \u76f8\u5c0d\u5411\u91cf\u5167\u7a4d\u81ea\u5df1\u5f8c\u7b49\u65bc\u5411\u91cf\u9577\u5ea6\u7684\u5e73\u65b9\r\n       (repeat)\r\n       (take 2)\r\n       (apply map *)\r\n       (apply +)\r\n       ; \u6e2c\u8a66\u78b0\u649e\u534a\u5f91\uff08\u4e00\u6a23\u7528\u5e73\u65b9\u4f86\u6bd4\u8f03\uff09\r\n       (> (* radius radius))))\r\n\r\n(defn checkAnswer [ctx s1 s2]\r\n  (let [[_ _ _ a1] (get-in ctx [:leftCircle s1])\r\n        [_ _ _ a2] (get-in ctx [:rightCircle s2])]\r\n    (= a1 a2)))\r\n\r\n(defn step [ctx]\r\n  (cond\r\n    ; \u6309\u4e0b\u6e38\u6a19\r\n    (:mouseDown ctx)\r\n    (let [idx (->> ; \u548c\u5de6\u65b9\u7684\u5713\u5708\u6e2c\u8a66\u9ede\u64ca\r\n                   (map (partial isPointInCircle (:mousePos ctx)) (:leftCircle ctx))\r\n                   ; \u5c07\u7d50\u679c\u914d\u5c0d\u7d22\u5f15\r\n                   (map vector (range))\r\n                   ; \u627e\u51fa\u9ede\u64ca\u5230\u7684\u5713\u5708\u7d22\u5f15\r\n                   (filter (fn [[_ selected]] selected))\r\n                   ; \u53d6\u51fa\u7d22\u5f15\r\n                   (ffirst))]\r\n      ; \u8a2d\u5b9a\u9078\u64c71\r\n      (merge ctx {:mouseDown false :select1 idx}))\r\n    \r\n    ; \u653e\u958b\u6e38\u6a19\r\n    (:mouseUp ctx)\r\n    (let [idx (->> ; \u540c\u4e0a\u3002\u4f46\u548c\u53f3\u65b9\u7684\u5713\u5708\u6e2c\u8a66\r\n                   (map (partial isPointInCircle (:mousePos ctx)) (:rightCircle ctx))\r\n                   (map vector (range))\r\n                   (filter (fn [[_ selected]] selected))\r\n                   (ffirst))]\r\n      (if-not idx\r\n        ; \u82e5\u653e\u958b\u6642\u6c92\u6709\u5728\u53f3\u908a\u5713\u5708\u5167\uff0c\u5247\u53d6\u6d88\u9078\u64c71\r\n        (merge ctx {:mouseUp false :select1 nil})\r\n        ; \u8a08\u7b97\u7b54\u6848\r\n        (let [s1 (:select1 ctx)\r\n              s2 idx\r\n              pass (checkAnswer ctx s1 s2)]\r\n          (if-not pass\r\n            (merge ctx {:mouseUp false :select1 nil})\r\n            ; \u82e5\u6210\u529f\u914d\u5c0d\uff0c\u5c07\u7d50\u679c\u8a18\u9304\u5728buildLine(\u6210\u529f\u7684\u7dda)\u4e2d\u3002\u6ce8\u610fbuildLine\u70ba\u96c6\u5408\r\n            (merge ctx {:mouseUp false :select1 nil :buildLine (conj (:buildLine ctx) [s1 s2])})))))\r\n    \r\n    :else\r\n    ctx))\r\n; ===================\r\n; ==== \u5b9a\u7fa9\u8996\u89ba\u7aef =====\r\n; ===================\r\n(defn sketchProc [pc]\r\n  (def pg 0)\r\n  (def circleRadius 5)\r\n  \r\n  (set! (.-setup pc) \r\n    (fn []\r\n      (.size pc 200 200)\r\n      (set! pg\r\n        (.createGraphics pc 200 200 (.-P3D pc)))))\r\n  \r\n  (set! (.-draw pc)\r\n    (fn []\r\n      (if-not model\r\n        (.text pc \"no model\" 30 30)\r\n        (let [mousePos (:mousePos model)\r\n              [mx my] mousePos]\r\n          ; \u80cc\u666f\r\n          (.background pc 200)\r\n          ; \u5de6\u53f3\u908a\u7684\u7403\u548c\u6587\u5b57\r\n          (dorun \r\n            (doseq [c (concat (:leftCircle model) (:rightCircle model))]\r\n              (let [isLeft (some (partial = c) (:leftCircle model))\r\n                    [x y radius a] c\r\n                    radius2 (* radius 2)\r\n                    showText (get-in data [a (if isLeft 0 1)])\r\n                    showTextOffsetX (-> (.textWidth pc showText) (/ 2) -)\r\n                    selected (isPointInCircle mousePos c)]\r\n                (if-not selected\r\n                  (do\r\n                    (.fill pc 255)\r\n                    (.ellipse pc x y radius2 radius2))\r\n                  (do\r\n                    (.fill pc 100 0 0)\r\n                    (.ellipse pc x y radius2 radius2)))\r\n                (.fill pc 0)\r\n                (.text pc showText (+ x showTextOffsetX) y))))\r\n          ; \u9023\u7d50\u4e2d\u7684\u7dda\r\n          (.fill pc 0)\r\n          (if-let [s1 (:select1 model)]\r\n            (let [[x y] (get-in model [:leftCircle s1])]\r\n              (.line pc x y mx my)))\r\n          ; \u9023\u7d50\u6210\u529f\u7684\u7dda\r\n          (.fill pc 0)\r\n          (dorun\r\n            (doseq [line (:buildLine model)]\r\n              (let [[s1 s2] line\r\n                    [x y] (nth (:leftCircle model) s1)\r\n                    [x2 y2] (nth (:rightCircle model) s2)]\r\n                (.line pc x y x2 y2))))\r\n          ; \u4f4d\u7f6e\r\n          (.fill pc 255)\r\n          (.ellipse pc mx my 10 10))))))\r\n(let [canvas (.getElementById js/document \"canvas1\")\r\n      p (js/Processing. canvas sketchProc)])\r\n"]}