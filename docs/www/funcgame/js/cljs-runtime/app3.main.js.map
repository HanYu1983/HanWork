{"version":3,"sources":["app3/main.cljs"],"mappings":";;;;;;;;;;;;;;;;;;;AAiCA,AAAA,AAAAA,AAAcG;;AAAd,AAAAF,AAAwBG;;AAAxB,AAAAF,AAA8BG;AAC9B,AAAA,AAAAC,AAAcE;;AAAd,AAAAD,AAAoBE;AAEpB,AAACC,AAAM,AAAA;AAEP,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAKC,AAEmBC;AAKxB,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAKC;AACL,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAKC;AACL,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAKC;AACL,AAAKC,AAAM,AAAA,AAACC;AAEZ,AAAA,AAAMC;AAAN,AACE,AAACR,AAAM;;AAEP,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAMS,AAIyB,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAACC,AAAMT,AAAY,AAACU,AAEEC,AAEtB,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAACF,AAAMT,AAAY,AAACU,AAIEC,AACtB,AAAA,AAAA,AAAA,AAACF,AAAMP,AACP,AAAA,AAAA,AAAA,AAAA,AAAA,AAACO,AAAMG,AACP,AAAA,AAAA,AAAA,AAAA,AAAA,AAACH,AAAMI;AAChCC,AAAW,AAAA,AAAA,AAAA,AAAA,AAACrB,AAAAA,AAAAA,AACD,AACC,AAAAsB,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAAA,AAAClB,AAAAA,AAAAA;;AACbmB,AAAc,AAAA,AAAA,AAACxB,AAAAA,AAAAA,AAAUyB,AAAAA,AACX,AACC,AAACC,AAAsB;AAAKC;AAAL,AAAA,AAAA,AAAmB,AAAAA;;;AACzDC,AAAY,AAAA,AAAA,AAAC5B,AAAAA,AAAAA,AAAUyB,AAAAA,AACX,AACC,AAACC,AAAsB;AAAKC;AAAL,AAAA,AAAA,AAAiB,AAAAA;;;AACrDE,AAAY,AAAA,AAAA,AAAC5B,AAAAA,AAAAA,AACD,AACC,AAAA6B,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAAA,AAACzB,AAAAA,AAAAA;;AACd0B,AAAmB,AAAA,AAAA,AAAA,AAAA,AAAC9B,AAAAA,AAAAA,AACD,AACC,AAAA+B,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAAA,AAAC3B,AAAAA,AAAAA;;AACrB4B,AAAkB,AAAA,AAAA,AAAA,AAAA,AAAChC,AAAAA,AAAAA,AACD,AACC,AAAAiC,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAAA,AAAC7B,AAAAA,AAAAA;;AACpB8B,AAAc,AAACC,AAAcd,AAAOE,AAAUI,AAAQS,AAAQN,AAAeE,AAC/D,AACC,AAAAK,AACC,AAAA,AAACE,AAAmBC,AACDC,AACAC,AAEAC,AACAC,AACAC,AACAC,AACAC,AACAC,AACAC,AACAC,AACAC,AACAC,AACAC,AACAC,AACAC,AACAC,AACAC,AACAC;AApBpBpB,AAuBCvB;AAvBD,AAAA,AAAAsB,AAAAC,AAAAD,AAAAC,AAACjC,AAAAA,AAAAA;;AAyBhBsD,AAAe,AAACxB,AAAcd,AAAOE,AACtB,AACC,AAAAqC,AACC;AAAKE,AAAMC;AAAX,AACMD,AACA,AAACd,AAAYe,AACb,AAACd,AAAgBc,AACjB,AAACb,AAAYa;;;AALpBF,AAAA,AAAA,AAAA,AAMa,AAAA,AAAA,AAAA,AAAA,AAAC7C,AAAMT,AAAY,AAACU,AACpB,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAACD,AAAMT,AAAY,AAACU;AAPjC,AAAA,AAAA2C,AAAAC,AAAAD,AAAAC,AAACxD,AAAAA,AAAAA;;AA/DvB,AA2EE,AAAY6B,AAAU;AAAK8B;AAAL,AAAQ,AAACC,AAAOrD,AAAMoD;;;;AAC5C;AAIF,AAAA,AAAME,AAAQC;AAAd,AACE,AAAM,AAASA,AACT;AAAA,AACE,AAAA,AAAA,AAAeA;;AAEf,AAAA,AAAAL,AAAAM,AAAYO;AAAZ,AAAA,AAAA,AAAAN,AAAA,AAAA,AAAA,AAAAD;AAAA,AAAAE,AAAAF;AAAAE,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAAE,AAAAC,AAAAH,AAAAA;AAAA,AAAAI,AAAAJ,AAAA,AAAwBM;AAAxB,AAAAF,AAAAJ,AAAA,AAAsCO;AAAtC,AACE,AAAA,AAAOV;;AACP,AAASA,AAAE,AAACW,AAAMF,AAAK,AAACG,AAAOH,AAAKC;;AACpCf;;AAHFA;;;;AAKA,AAAA,AAAAA,AAAAM,AAAYa;AAAZ,AAAA,AAAA,AAAAZ,AAAA,AAAA,AAAA,AAAAD;AAAA,AAAAY,AAAAZ;AAAAY,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAT,AAAA,AAAAS,AAAA,AAAA,AAAA,AAAA,AAAAR,AAAAC,AAAAO,AAAAA;AAAA,AAAAN,AAAAM,AAAA,AAAsBJ;AAAtB,AAAAF,AAAAM,AAAA,AAAoCE;AAApC,AACE,AAAOf,AAAE,AAACW,AAAMF,AAAK,AAACG,AAAOH,AAAK,AAACE,AAAMI,AAAM,AAACH,AAAOG;;AACvDpB;;AAFFA;;;;AAIA,AAAA,AAAAA,AAAAM,AAAYgB;AAAZ,AAAA,AAAA,AAAAf,AAAA,AAAA,AAAA,AAAAD;AAAA,AAAAe,AAAAf;AAAAe,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAZ,AAAA,AAAAY,AAAA,AAAA,AAAA,AAAA,AAAAX,AAAAC,AAAAU,AAAAA;AAAA,AAAAT,AAAAS,AAAA,AAAwBP;AAAxB,AAAAF,AAAAS,AAAA,AAAsCE;AAAtC,AACE,AAAOlB,AAAE,AAAKkB,AAAM,AAACP,AAAMF,AAAK,AAACG,AAAOH;;AACxCd;;AAFFA;;;;AAIA,AAAA,AAAAA,AAAAM,AAAYmB;AAAZ,AAAA,AAAA,AAAAlB,AAAA,AAAA,AAAAD;AAAA,AAAAkB,AAAAlB;AAAAkB,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAf,AAAA,AAAAe,AAAA,AAAA,AAAA,AAAA,AAAAd,AAAAC,AAAAa,AAAAA;AAAA,AAAAZ,AAAAY,AAAA,AAAuBV;AAAvB,AACE,AAAOT,AAAE,AAAKqB,AAAM,AAACV,AAAMF,AAAK,AAACG,AAAOH;;AACxCd;;AAFFA;;;;AAIA,AAAA,AAAAA,AAAAM,AAAYwB;AAAZ,AAAA,AAAA,AAAAvB,AAAA,AAAA,AAAA,AAAAD;AAAA,AAAAqB,AAAArB;AAAAqB,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAlB,AAAA,AAAAkB,AAAA,AAAA,AAAA,AAAA,AAAAjB,AAAAC,AAAAgB,AAAAA;AAAA,AAAAf,AAAAe,AAAA,AAA2BI;AAA3BH,AAAA,AAAAhB,AAAAe,AAAA;AAAA,AAAAE,AAAAD,AAAA,AAAA,AAA4CI;AAA5C,AAAAH,AAAAD,AAAA,AAAA,AAA8CK;AAA9C,AACE,AAAA,AAAO5B;;AACP,AAAOA,AAAE,AAAA,AAAK,AAAA,AAAS0B,AAAU,AAAA,AAAcA,AAAOC,AAAEC;;AACxDjC;;AAHFA;;;;AAKA,AAAA,AAAAA,AAAAM,AAAY8B;AAAZ,AAAA,AAAA,AAAA7B,AAAA,AAAA,AAAA,AAAA,AAAAD;AAAA,AAAA4B,AAAA5B;AAAA4B,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAzB,AAAA,AAAAyB,AAAA,AAAA,AAAA,AAAA,AAAAxB,AAAAC,AAAAuB,AAAAA;AAAA,AAAAtB,AAAAsB,AAAA,AAA6BG;AAA7BF,AAAA,AAAAvB,AAAAsB,AAAA;AAAA,AAAAL,AAAAM,AAAA,AAAA,AAA2CH;AAA3C,AAAAH,AAAAM,AAAA,AAAA,AAA6CF;AAA7C,AAAArB,AAAAsB,AAAA,AAA0DI;AAA1D,AACE,AAAA,AAAOjC;;AACP,AAAOA,AAAE,AAAK,AAAA,AAAagC,AAAQL,AAAE,AAAA,AAAGC;;AACxC,AAAO5B,AAAE,AAAKiC,AAAQN,AAAE,AAAA,AAAGC;;AAC3BjC;;AAJFA;;;;AAQA,AAAKuC,AACH,AACMC,AAAa,AAAA,AAAA,AAAA,AAAA,AAACtG,AAAAA,AAAAA,AACD,AACC,AAACyB,AACA;AAAA,AACE,AAAC8E,AAAO,AAAA,AAAA,AAAA,AAAA,AAACC,AAAQnC,AAA6C,AAAA,AAAA,AAAAoC,AAAY7F;;AAC3F8F,AAAK,AAAA,AAAC7F;AACN8F,AAAML,AACA,AACC,AAAAM,AACC,AAaF;AAbOE,AAAER;AAAP,AACE,AAACS,AACA;AAAAC,AAAKF;AAAL,AAAA,AAAAG,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA1C,AAAA,AAAA0C,AAAA,AAAA,AAAA,AAAA,AAAAzC,AAAAC,AAAAwC,AAAAA;AAAAA,AAAmCI;AAAnC,AAAA3C,AAAAuC,AAAA,AAAeC;AAAf,AAAAxC,AAAAuC,AAAA,AAAkBE;AAAlB,AAAAzC,AAAAuC,AAAA,AAAqBG;AAArB,AACE,AAAME,AAAI,AAAA,AAAA,AAACC,AAAOT,AAAGI;AACfM,AAAKL;AACLM,AAAO,AAAGD,AAAKF;AAFrB,AAGMR,AACA,AAAA,AAAA,AAACY,AAAWR,AAAQ,AAACS,AAAWR,AAChC,AAAA,AAAA,AAACO,AAAWR,AAAc,AAACS,AAAWP,AACtC,AAAA,AAAA,AAACM,AAAWR,AAAS,AAACV,AAAQoB,AAAE,AAAA,AAAGH;;AAC3CX,AACAR;;;AAZJO,AAAA;AAAA,AAAA,AAAAD,AAAAC,AAAAD,AAAAC,AAACxG,AAAAA,AAAAA;AAcU;AAAK2D;AAAL,AAAQ,AAACC,AAAOyC,AAAK1C;;;AAvB7C,AAwBE;;AAAA,AACE,AAAA6D,AAAA,AAAAC,AAAA,AAAArB,AAAYC;AAAZqB,AAAA;AAAAC,AAAA;AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAAE,AAAQd;AAAR,AAAA,AACE,AAAA,AAAM8B;AAANR,AACqCtB;AADrC,AAAAxB,AAAA8C,AAAA,AAAA,AACOvB;AADPwB,AAAA,AAAA/C,AAAA8C,AAAA,AAAA;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAnE,AAAA,AAAAmE,AAAA,AAAA,AAAA,AAAA,AAAAlE,AAAAC,AAAAiE,AAAAA;AAAA,AAAAhE,AAAAgE,AAAA,AACkBvB;AADlB,AAAAzC,AAAAgE,AAAA,AACqBtB;AADrB,AAAA1C,AAAAgE,AAAA,AAC8BpB;AAD9BqB,AAEYvB;AAFZ,AAAAzB,AAAAgD,AAAA,AAAA,AAEO7C;AAFP,AAAAH,AAAAgD,AAAA,AAAA,AAES5C;AAFT6C,AAGY,AAAA,AAAA,AAAA,AAACM,AAAItB,AAAER;AAHnB,AAAAzB,AAAAiD,AAAA,AAAA,AAGO9C;AAHP,AAAAH,AAAAiD,AAAA,AAAA,AAGS7C;AAHT,AAIE,AAAA,AAAO5B;;AACP,AAAA,AAAOA,AAAE2B,AAAEC,AAAEkD;;AACb,AAAA,AAAA,AAAA,AAAO9E;;AACP,AAAA,AAAOA,AAAE2B,AAAEC,AAAMuB,AAAI,AAAA,AAAQ,AAAG2B;;AAChC,AAAA,AAAA,AAAA,AAAO9E;;AACP,AAAA,AAAOA,AAAE2B,AAAEC,AAAMoB,AAAG,AAAA,AAAQ,AAAG8B;;AAE/B;AAZJ;AAAA,AAAApB;AAAAE;AAAAC;AAAA,AAAAC,AAAA;;;;;;;AAAA,AAAAC,AAAA,AAAAJ,AAAAD;AAAA,AAAA,AAAAK;AAAA,AAAA,AAAAL,AAAAK;AAAA,AAAA,AAAA,AAAAC,AAAAN;AAAA,AAAAO,AAAA,AAAAC,AAAAR;AAAA,AAAA,AAAA,AAAAS,AAAAT;AAAAO;AAAA,AAAAG,AAAAH;AAAA;;;;;;;AAAA,AAAA,AAAAtD,AAAA+C,AAAQV;AAAR,AAAA,AACE,AAAA,AAAM8B;AAANJ,AACqC1B;AADrC,AAAAxB,AAAAkD,AAAA,AAAA,AACO3B;AADP4B,AAAA,AAAAnD,AAAAkD,AAAA,AAAA;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAvE,AAAA,AAAAuE,AAAA,AAAA,AAAA,AAAA,AAAAtE,AAAAC,AAAAqE,AAAAA;AAAA,AAAApE,AAAAoE,AAAA,AACkB3B;AADlB,AAAAzC,AAAAoE,AAAA,AACqB1B;AADrB,AAAA1C,AAAAoE,AAAA,AAC8BxB;AAD9ByB,AAEY3B;AAFZ,AAAAzB,AAAAoD,AAAA,AAAA,AAEOjD;AAFP,AAAAH,AAAAoD,AAAA,AAAA,AAEShD;AAFTiD,AAGY,AAAA,AAAA,AAAA,AAACE,AAAItB,AAAER;AAHnB,AAAAzB,AAAAqD,AAAA,AAAA,AAGOlD;AAHP,AAAAH,AAAAqD,AAAA,AAAA,AAGSjD;AAHT,AAIE,AAAA,AAAO5B;;AACP,AAAA,AAAOA,AAAE2B,AAAEC,AAAEkD;;AACb,AAAA,AAAA,AAAA,AAAO9E;;AACP,AAAA,AAAOA,AAAE2B,AAAEC,AAAMuB,AAAI,AAAA,AAAQ,AAAG2B;;AAChC,AAAA,AAAA,AAAA,AAAO9E;;AACP,AAAA,AAAOA,AAAE2B,AAAEC,AAAMoB,AAAG,AAAA,AAAQ,AAAG8B;;AAE/B;AAZJ;AAAA,AAAA,AAAAT,AAAAX;AAAA;AAAA;AAAA;;;;;;;;AAAA;;;;;;;;;AAcN;AAAA,AAAMsB;AAAN,AACE,AAAA,AAAA1C,AAAMzC,AAAGpD;AAAT,AACE,AAAA,AAAOuD;;AACP,AAAA,AAAA,AAAOA,AAAE,AAAA,AAAe,AAAA,AAAQH;;AAChC,AAAA,AAAA,AAAOG,AAAE,AAAA,AAAmB,AAAA,AAAYH;;AACxC,AAAA,AAAA,AAAOG,AAAE,AAAA,AAAkB,AAAA,AAAWH;;AACtC,AAAA,AAAA,AAAOG,AAAE,AAAA,AAAe,AAAA,AAAQH;;;;;AAE5C,AAAM,AAAQG,AACR;AAAA,AACE,AAAA,AAAAsC,AAAMzC,AAAGpD;AACH0F,AAAS,AAAA,AAAWtC;AAD1B,AAEE,AAAA,AAAA,AAAA,AAAOG;;AACP,AAAA,AAAA,AAAA,AAAA,AAAOA;;AACP,AAAA,AAAOA;;AACP,AAAA,AAACiF,AAAO,AAACrC,AACA,AAAA,AAACxE,AAAmBoC,AACDM,AACAG,AACAQ,AACAM,AACnBlC,AACAsC;;AACT,AAACD,AAAAA,AAAAA;;AACD,AAAC8C;;;;AAEb,AAAAE,AAAA,AAAQnF;;AAGR,AAAA,AAAAuC,AAAMzC,AAAGpD;AACH0I,AAAK,AAACxE,AAAM,AAAA,AAACyB,AAAe,AAAA,AAAWvC;AAD7C,AAEE,AAAAuF,AAAA,AAAAzB,AAAc,AAAA,AAAA,AAACP,AAAO+B;AAAtBE,AAAA;AAAAC,AAAA;AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAAE,AAAA,AAAAH,AAAAE;AAAA,AAAA/D,AAAAgE,AAAA,AAAA,AAASE;AAAT,AAAAlE,AAAAgE,AAAA,AAAA,AAAWG;AAAX,AAAA,AAAA;AAAA,AAAAP;AAAAC;AAAAC;AAAA,AAAAC,AAAA;;;;;;;AAAA,AAAAxB,AAAA,AAAAJ,AAAAyB;AAAA,AAAA,AAAArB;AAAA,AAAA,AAAAqB,AAAArB;AAAA,AAAA,AAAA,AAAAC,AAAAoB;AAAA,AAAAnB,AAAA,AAAAC,AAAAkB;AAAA,AAAA,AAAA,AAAAjB,AAAAiB;AAAAnB;AAAA,AAAAG,AAAAH;AAAA;;;;;;;AAAA,AAAAwB,AAAA,AAAA9E,AAAAyE;AAAA,AAAA5D,AAAAiE,AAAA,AAAA,AAASC;AAAT,AAAAlE,AAAAiE,AAAA,AAAA,AAAWE;AAAX,AAAA,AAAA;AAAA,AAAA,AAAAtB,AAAAe;AAAA;AAAA;AAAA;;;;;;;;AAAA;;;;;AAIF,AAAMQ,AAAO,AAAA,AAACC;AACRC,AAAM,AAAA,AAACD;AACPrD,AAAM,AAAA,AAAA,AAAA,AAAA,AAAC3G,AAAAA,AAAAA,AACD,AACC,AAACyB,AACA,AAGF;;AAHE,AACE,AAACqD,AAAM,AAAA,AAACyB,AAAe,AAAA,AAAA,AAAAE,AAAY7F;;AACtC,AAAA,AAACa;AAADyI;AAAA,AAAwB,AAAA,AAAAA;;AACb;AAAK/D;AAAL,AAAY,AAAClC,AAAOgG,AAAM,AAAA,AAAI9D;;;AARtD,AAUE,AAAA,AAAMgE;;AAAN,AACE,AAAA,AAAA1D,AAAM2D,AAAIL;AAAV,AAAAtD,AACM4D,AAAGJ;AADT,AAEE,AAAIG;AAAJ,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;AAAA,AAEwB,AAACE,AAAMP,AAAOQ;;AAFtC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAKK,AAAAC,AAAA;AAAAC;AAAA,AAAA,AAAAC,AAAA,AAAA;;AAAA,AAAA,AAAAD,AAAAA;;AAAA,AAAA,AAAAvC,AAAA,AAAAJ,AAAA2C;AAAA,AAAA,AAAAvC;AAAA,AAAA,AAAAyC,AAAAzC;AAAA,AAAA,AAAA0C,AAAA,AAAA9F,AAAA6F;AAAA,AAAAhF,AAAAiF,AAAA,AAAA,AAAOoB;AAAP,AAAArG,AAAAiF,AAAA,AAAA,AAAaqB;AAAb,AAAA,AAAApB,AAAA;AAAAC;AAAA,AAAA,AAAAJ,AAAA,AAAA;;AAAA,AAAA,AAAAI,AAAAA;;AAAA,AAAA,AAAA5C,AAAA,AAAAJ,AAAAgD;AAAA,AAAA,AAAA5C;AAAA,AAAA,AAAA4C,AAAA5C;AAAA,AAAA,AAAA,AAAAC,AAAA2C;AAAA,AAAAC,AA8pEsC,AAAA1C,AAAAyC;AA9pEtCE,AAAA,AAAAzC,AAAAwC;AAAAE,AAAA,AAAAC,AAAAF;AAAA,AAAA,AAAA,AAAA,AAAAG,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAH;AAAA,AAAAI,AAAA,AAAAC,AAAAN,AAAAI;AAAA,AAAAxF,AAAAyF,AAAA,AAAA,AACOhF;AADP,AAAAT,AAAAyF,AAAA,AAAA,AACcc;AADd,AAAA,AAAA,AAAAZ,AAAAL,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAES,AAAA,AAAKe,AAAU5F,AAEhB,AAAK4F,AACL,AAAK5F,AACsB,AAAA,AAAI,AAAA,AAAG8F,AAEL,AAAA,AAAA,AAAI,AAAA,AAAGA,AAEO,AAAKA;;AAVxD,AAAA,AAAAf,AAAA;;;;AAAA;;;;;AAAA,AAAAI,AAAA,AAAAC,AAAAP,AAAA,AAAAQ,AAAA,AAAAnD,AAAAwC;;AAAA,AAAAS,AAAA,AAAAC,AAAAP,AAAA;;;AAAA,AAAAS,AAAA,AAAA5G,AAAAgG;AAAA,AAAAnF,AAAA+F,AAAA,AAAA,AACOtF;AADP,AAAAT,AAAA+F,AAAA,AAAA,AACcQ;AADd,AAAA,AAAAP,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAF,AAAA,AAAAG,AAAAd,AAES,AAAA,AAAKkB,AAAU5F,AAEhB,AAAK4F,AACL,AAAK5F,AACsB,AAAA,AAAI,AAAA,AAAG8F,AAEL,AAAA,AAAA,AAAI,AAAA,AAAGA,AAEO,AAAKA;;;AAVxD;;;;;AAAA,AAAA;;;AAAAL,AAAA,AAAA/D,AAAA,AAAA+C,AACqBoB;AADrB,AAAA,AAAAJ;AAAA,AAAAC,AAAAD,AAAA,AAAAE,AAAA,AAAAH,AAAAnB;;AAAA,AAAA,AAAAmB,AAAAnB;;;;;AAAA;;;;;AAAA,AAAA;;;AAAA,AAAA,AAAAD,AAAkBH;;;AALvB,AAAA,AAAA,AAAA,AAAA;;AAAA,AAgBuB,AAACC,AAAMP,AAAOQ;;AAhBrC;;;;;AAkBJ,AAAA,AAAM4B;;AAAN,AACE,AAAA,AAACC,AAAUjC,AACD,AAAA,AAAiB3I;;;;AAE/B,AAAC2K;;AAID,AAAA,AAAC7L","names":["js/rxjs.fromEvent","js/rxjs.timer","js/rxjs.Subject","app3.main/fromEvent","app3.main/timer","app3.main/Subject","js/rxjs.operators.mapTo","js/rxjs.operators.scan","app3.main/mapTo","app3.main/scan","cljs.core.print.cljs$core$IFn$_invoke$arity$variadic","app3.main/player","app3.weapon.fist/fist","app3.main/box","app3.main/healing","app3.main/bullet","app3.main/model","cljs.core.atom.cljs$core$IFn$_invoke$arity$1","app3.main/main","initialModel","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic","cljs.core.gensym.cljs$core$IFn$_invoke$arity$0","app3.qlearning/qtable","app3.weapon.gun/gun","app3.weapon.meleeGun/meleeGun","ontick","G__36457","onkeydown","js/document","js/rxjs.operators.map","e","onkeyup","trigger","G__36458","onSpawnHealing","G__36459","onSpawnWeapon","G__36460","evtStream","js/rxjs.merge","app3.emitter/inputOb","G__36461","G__36462","app3.tool/comduce","app3.system.input/playerController","app3.system.action/actionController","app3.system.basic/moveSystem","app3.system.bulletSys/checkBulletHitPlayer","app3.system.healingSys/playerCollideHealing","app3.system.weaponSys/playerCollideWeapon","app3.system.weaponSys/tickWeapon","app3.system.weaponSys/fireBullet","app3.system.ai/updateBrain","app3.system.ai/syncBrainAction","app3.system.ai/brainReward","app3.system.bulletSys/removeBullet","app3.system.basic/boundPosition","app3.system.basic/resetPlayerVelocity","app3.system.basic/resetEnemyVelocity","app3.system.healingSys/spawnHealing","app3.system.weaponSys/spawnWeapon","app3.system.basic/dieSystem","app3.system.basic/roundSystem","testQlearn","G__36463","G__36464","model","evt","m","cljs.core/reset!","app3.main/sketch","p","entity","app3.tool/checkProperty","map__36465","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","app3.main/drawCircle","pos","radius","cljs.core/first","cljs.core/second","map__36467","app3.main/drawRect","size","map__36469","app3.main/drawWeapon","type","map__36471","app3.main/drawState","cljs.core/type","map__36473","vec__36474","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","app3.main/drawUseWeapon","useW","x","y","map__36478","vec__36479","app3.main/drawActionValue","brain","action","app3.main/drawHp","entities","cljs.core.filter.cljs$core$IFn$_invoke$arity$2","cljs.core.partial.cljs$core$IFn$_invoke$arity$2","cljs.core/deref","view","_","G__36483","G__36484","a","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","p__36485","map__36486","id","hp","position","obj","old","cljs.core.get_in.cljs$core$IFn$_invoke$arity$2","curr","offset","cljs.core.update_in.cljs$core$IFn$_invoke$arity$3","cljs.core/constantly","cljs.core/+","seq__36488","cljs.core/seq","chunk__36489","count__36490","i__36491","temp__5735__auto__","cljs.core/chunked-seq?","c__4550__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","cljs.core/next","vec__36514","map__36517","vec__36518","vec__36521","vec__36525","map__36528","vec__36529","vec__36532","barLen","cljs.core.map.cljs$core$IFn$_invoke$arity$3","app3.main/drawRoundState","cljs.core.doall.cljs$core$IFn$_invoke$arity$1","js/p5","plyr","seq__36536","chunk__36537","count__36538","i__36539","vec__36546","vec__36549","k","v","tmodel","reagent.core.atom.cljs$core$IFn$_invoke$arity$1","table","p1__36456#","app3.main/drawQtable","tm","t","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2","cljs.core/not","iter__4523__auto__","s__36553","cljs.core/LazySeq","xs__6292__auto__","vec__36558","iterys__4519__auto__","s__36555","c__4521__auto__","size__4522__auto__","b__36557","cljs.core/chunk-buffer","i__36556","vec__36561","cljs.core._nth.cljs$core$IFn$_invoke$arity$2","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__36554","vec__36564","cljs.core/cons","cljs.core/rest","fs__4520__auto__","cljs.core.concat.cljs$core$IFn$_invoke$arity$2","iter__36552","state","sub","value","app3.main/mountit","reagent.core.render.cljs$core$IFn$_invoke$arity$2"],"sourcesContent":["(ns app3.main\r\n  (:require-macros [app3.macros :as m])\r\n  (:require [app3.tool]\r\n            [app3.emitter :refer [inputOb send]]\r\n            [app3.qlearning :as q]\r\n            [app3.system.basic :refer [moveSystem\r\n                                      boundPosition\r\n                                      resetPlayerVelocity\r\n                                      resetEnemyVelocity\r\n                                      moveCostSystem\r\n                                      dieSystem\r\n                                      roundSystem]]\r\n            [app3.system.weaponSys :refer [tickWeapon\r\n                                          fireBullet\r\n                                          playerCollideWeapon\r\n                                          spawnWeapon]]\r\n            [app3.system.bulletSys :refer [checkBulletHitPlayer\r\n                                          removeBullet]]\r\n            [app3.system.healingSys :refer [playerCollideHealing\r\n                                           spawnHealing]]\r\n            [app3.system.input :refer [playerController]]\r\n            [app3.system.action :refer [actionController]]\r\n            [app3.system.ai :refer [updateBrain\r\n                                   syncBrainAction\r\n                                   brainReward]]\r\n            [app3.system.debug :refer [logSystem]]\r\n            [app3.playerImpl]\r\n            [app3.weapon.def]\r\n            [app3.weapon.fist :refer [fist]]\r\n            [app3.weapon.gun :refer [gun]]\r\n            [app3.weapon.meleeGun :refer [meleeGun]]\r\n            [reagent.core :as r]))\r\n\r\n(m/requireJs [fromEvent timer Subject] rxjs)\r\n(m/requireJs [mapTo scan] rxjs.operators)\r\n\r\n(print (macroexpand '(m/defPlayerCollide playerCollideHealing :healing (fn [plyr] plyr))))\r\n\r\n(def player {:id nil\r\n             :hp 100\r\n             :useWeapon fist\r\n             :position [0 0]\r\n             :velocity [0 0]\r\n             :action #{}\r\n             :radius 50})\r\n(def box {:hp 200 :position [200 100] :radius 10})\r\n(def healing {:position [0 0] :healing 0 :radius 10})\r\n(def bullet {:from nil :position [0 0] :velocity [0 0] :radius 5 :power 0 :bullet 0})\r\n(def model (atom nil))\r\n\r\n(defn main []\r\n  (print (m/canUseJavaClass))\r\n  ; model\r\n  (let [initialModel {:round 0\r\n                      :playerWin 0\r\n                      :enemyWin 0\r\n                      :ticks 0\r\n                      :entities [(merge player {:id (gensym)\r\n                                                :player 0\r\n                                                :brain q/qtable\r\n                                                :position [50 300]})\r\n                                 (merge player {:id (gensym)\r\n                                                :radius 30\r\n                                                :position [550 300]\r\n                                                :enemy 0\r\n                                                :brain q/qtable})\r\n                                 (merge box {:healing 0})\r\n                                 (merge gun {:position [200 200]})\r\n                                 (merge meleeGun {:position [150 300]})]}\r\n        ontick (-> (timer 0 0)\r\n                   (.pipe\r\n                    (mapTo [:update])))\r\n        onkeydown (-> (fromEvent js/document \"keydown\")\r\n                      (.pipe\r\n                       (js/rxjs.operators.map (fn [e] [:keydown, e.key]))))\r\n        onkeyup (-> (fromEvent js/document \"keyup\")\r\n                    (.pipe\r\n                     (js/rxjs.operators.map (fn [e] [:keyup, e.key]))))\r\n        trigger (-> (timer 5000)\r\n                    (.pipe\r\n                     (mapTo [:playerCollideWeapon nil nil])))\r\n        onSpawnHealing (-> (timer 0 1000)\r\n                           (.pipe\r\n                            (mapTo [:spawn :healing])))\r\n        onSpawnWeapon (-> (timer 0 1000)\r\n                          (.pipe\r\n                           (mapTo [:spawn :weapon])))\r\n        evtStream (-> (js/rxjs.merge ontick onkeydown onkeyup inputOb onSpawnHealing onSpawnWeapon)\r\n                      (.pipe\r\n                       (scan\r\n                        (app3.tool/comduce [playerController\r\n                                           actionController\r\n                                           moveSystem\r\n                                           ;moveCostSystem\r\n                                           checkBulletHitPlayer\r\n                                           playerCollideHealing\r\n                                           playerCollideWeapon\r\n                                           tickWeapon\r\n                                           fireBullet\r\n                                           updateBrain\r\n                                           syncBrainAction\r\n                                           brainReward\r\n                                           removeBullet\r\n                                           boundPosition\r\n                                           resetPlayerVelocity\r\n                                           resetEnemyVelocity\r\n                                           spawnHealing\r\n                                           spawnWeapon\r\n                                           dieSystem\r\n                                           roundSystem\r\n                                           ;logSystem\r\n                                           ])\r\n                        initialModel)))\r\n\r\n        testQlearn (-> (js/rxjs.merge ontick onkeydown)\r\n                       (.pipe\r\n                        (scan\r\n                         (fn [model evt]\r\n                           (-> model\r\n                               (updateBrain evt)\r\n                               (syncBrainAction evt)\r\n                               (brainReward evt)))\r\n                         {:entities [(merge player {:id (gensym) :player 0})\r\n                                     (merge player {:id (gensym)\r\n                                                    :radius 30\r\n                                                    :position [400 50]\r\n                                                    :enemy 0})]})))]\r\n\r\n    (.subscribe evtStream (fn [m] (reset! model m)))\r\n    (comment (.subscribe testQlearn (fn [m] (print m)))))\r\n\r\n\r\n  ; view\r\n  (defn sketch [p]\r\n    (set! (.-setup p)\r\n          (fn []\r\n            (.createCanvas p 600 600)\r\n            ; \u5728\u9019\u88e1\u5b9a\u7fa9\u51fd\u5f0f\u5c07p\u9589\u5305\u8d77\u4f86\r\n            (m/defdocom drawCircle {pos :position radius :radius}\r\n              (.fill p 255)\r\n              (.circle p (first pos) (second pos) radius)\r\n              model)\r\n\r\n            (m/defdocom drawRect {pos :position size :size}\r\n              (.rect p (first pos) (second pos) (first size) (second size))\r\n              model)\r\n\r\n            (m/defdocom drawWeapon {pos :position type :weapon}\r\n              (.text p (str type) (first pos) (second pos))\r\n              model)\r\n\r\n            (m/defdocom drawState {pos :position}\r\n              (.text p (str type) (first pos) (second pos))\r\n              model)\r\n\r\n            (m/defdocom drawUseWeapon {useW :useWeapon [x y] :position}\r\n              (.fill p 0)\r\n              (.text p (str (:weapon useW) \" \" (:bulletCount useW)) x y)\r\n              model)\r\n\r\n            (m/defdocom drawActionValue {brain :brain [x y] :position action :action}\r\n              (.fill p 0)\r\n              (.text p (str (:lastAction brain)) x (+ y 40))\r\n              (.text p (str action) x (+ y 60))\r\n              model)\r\n\r\n            ; \u9019\u88e1\u793a\u7bc4\u548cmodel\u5206\u96e2\u7684\u8996\u89ba\u72c0\u614b.\r\n            ; clojure\u4e5f\u80fd\u5f88\u597d\u7684\u5c07\u529f\u80fd\u5207\u5272(\u975e\u7d14\u51fd\u6578\u5f0f), \u4f7f\u7528atom\r\n            (def drawHp\r\n              (let [; \u53ef\u4ee5\u9032\u4e00\u6b65\u5c07\u8f38\u5165\u7531\u5916\u90e8\u50b3\u5165(entities observable)\r\n                    entities (-> (timer 0 33)\r\n                                 (.pipe\r\n                                  (js/rxjs.operators.map\r\n                                   (fn []\r\n                                     (filter (partial app3.tool/checkProperty [:id :hp :position]) (:entities @model))))))\r\n                    view (atom nil)\r\n                    _ (-> entities\r\n                          (.pipe\r\n                           (scan\r\n                            (fn [a entities]\r\n                              (reduce\r\n                               (fn [a {:keys [id hp position] :as obj}]\r\n                                 (let [old (get-in a [id :old])\r\n                                       curr hp\r\n                                       offset (- curr old)]\r\n                                   (-> a\r\n                                       (update-in [id :hp] (constantly hp))\r\n                                       (update-in [id :position] (constantly position))\r\n                                       (update-in [id :old] (partial + (/ offset 10))))))\r\n                               a\r\n                               entities))\r\n                            {}))\r\n                          (.subscribe (fn [m] (reset! view m))))]\r\n                (fn []\r\n                  (doseq [hp @view]\r\n                    (let [barLen 100\r\n                          [id {:keys [hp position old]}] hp\r\n                          [x y] position\r\n                          [x y] (map + position [-50 20])]\r\n                      (.fill p 0)\r\n                      (.rect p x y barLen 5)\r\n                      (.fill p 255 0 0)\r\n                      (.rect p x y (-> old (/ 100) (* barLen)) 5)\r\n                      (.fill p 0 255 0)\r\n                      (.rect p x y (-> hp (/ 100) (* barLen)) 5)\r\n                      ;(.text p (str hp) x y)\r\n                      (comment \"end seq\"))))))\r\n\r\n            (defn drawRoundState []\r\n              (let [m @model]\r\n                (.fill p 0)\r\n                (.text p (str \"round: \" (:round m)) 0 20)\r\n                (.text p (str \"playerWin: \" (:playerWin m)) 0 40)\r\n                (.text p (str \"enemyWin: \" (:enemyWin m)) 0 60)\r\n                (.text p (str \"ticks: \" (:ticks m)) 0 80)))))\r\n\r\n    (set! (.-draw p)\r\n          (fn []\r\n            (let [m @model\r\n                  entities (:entities m)]\r\n              (.fill p 255 255 255)\r\n              (.rect p 0 0 600 600)\r\n              (.fill p 0)\r\n              (doall [(reduce\r\n                       (app3.tool/comduce [drawCircle\r\n                                          drawRect\r\n                                          drawWeapon\r\n                                          drawUseWeapon\r\n                                          drawActionValue])\r\n                       m\r\n                       entities)])\r\n              (drawHp)\r\n              (drawRoundState)))))\r\n\r\n  (js/p5. sketch \"container\")\r\n\r\n\r\n  (let [m @model\r\n        plyr (first (filter :player (:entities m)))]\r\n    (doseq [[k v] (get-in plyr [:q])]))\r\n\r\n\r\n\r\n  (let [tmodel (r/atom false)\r\n        table (r/atom {})\r\n        _ (-> (timer 0 5000)\r\n              (.pipe\r\n               (js/rxjs.operators.map\r\n                (fn []\r\n                  (first (filter :player (:entities @model)))))\r\n               (js/rxjs.operators.map #(:brain %)))\r\n              (.subscribe (fn [brain] (reset! table (:q brain)))))]\r\n\r\n    (defn drawQtable []\r\n      (let [tm @tmodel\r\n            t @table]\r\n        (if tm\r\n          [:div \r\n           [:button {:on-click #(swap! tmodel not)} \"close\"]\r\n           [:table {:border 1}\r\n            [:tbody\r\n             (for [[state sub] t\r\n                   [action value] sub]\r\n               ^{:key (str state \" \" action)}\r\n               [:tr\r\n                [:td (str state)]\r\n                [:td (str action)]\r\n                [:td {:style {:background-color (if (< value 0)\r\n                                                  \"red\"\r\n                                                  (if (> value 5)\r\n                                                    \"green\"\r\n                                                    \"white\"))}} (str value)]])]]]\r\n          [:button {:on-click #(swap! tmodel not)} \"open\"])))\r\n\r\n    (defn mountit []\r\n      (r/render [drawQtable]\r\n                (.getElementById js/document \"qtable\"))))\r\n\r\n  (mountit)\r\n\r\n\r\n\r\n  (print \"start app xx2\"))\r\n"]}