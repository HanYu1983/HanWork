{"version":3,"sources":["app/t2/main.cljs"],"mappings":"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","names":["p__36453","map__36454","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","app.t2.main/targetCreate","pos","info","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic","cljs.core.gensym.cljs$core$IFn$_invoke$arity$0","p__36759","map__36761","app.t2.main/targetGo","time","ctx","target","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","p__36769","map__36773","app.t2.main/targetUpdate","pred__36776","expr__36777","G__36779","G__36780","G__36786","G__36787","G__36789","G__36790","G__36793","G__36794","cljs.core/=","offsetTime","offsetY","x__4222__auto__","y__4223__auto__","cljs.core.map.cljs$core$IFn$_invoke$arity$3","cljs.core/+","app.t2.main/step","handleEvents","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","e","pred__36804","expr__36805","G__36807","G__36808","targets","targetsAfterEffect","cljs.core.map.cljs$core$IFn$_invoke$arity$2","cljs.core.partial.cljs$core$IFn$_invoke$arity$2","replaceForm","cljs.core/zipmap","replaceTargets","cljs.core.replace.cljs$core$IFn$_invoke$arity$2","handleTargets","handleTime","js/Date","app.t2.main/main","app.t2.main/model","app.t2.main/evt","cljs.core.async.chan.cljs$core$IFn$_invoke$arity$0","app.t2.main/useKeys","js/setInterval","c__30213__auto__","cljs.core.async.chan.cljs$core$IFn$_invoke$arity$1","cljs.core.async.impl.dispatch/run","f__30214__auto__","switch__30004__auto__","state_36828","state_val_36829","inst_36821","inst_36822","inst_36823","cljs.core/PersistentHashMap","cljs.core.async.impl.ioc-helpers/put!","inst_36826","cljs.core.async.impl.ioc-helpers/return-chan","statearr-36855","state-machine__30005__auto__","ret-value__30006__auto__","result__30007__auto__","cljs.core/keyword-identical?","e36856","js/Object","ex__30008__auto__","statearr-36857","cljs.core.async.impl.ioc-helpers/process-exception","state__30215__auto__","statearr-36860","cljs.core.async.impl.ioc-helpers/USER-START-IDX","cljs.core.async.impl.ioc-helpers/run-state-machine-wrapped","state_36872","state_val_36873","inst_36865","inst_36866","inst_36867","inst_36869","statearr-36879","e36893","statearr-36899","statearr-36912","firstTarget","state_37263","state_val_37264","inst_37259","statearr-37267","statearr-37271","inst_37142","inst_37235","cljs.core/PersistentVector","inst_37236","inst_37237","inst_37238","statearr-37272","inst_36936","inst_36940","inst_36941","inst_36945","inst_36946","inst_36947","inst_36949","inst_36960","inst_36963","inst_36965","inst_36967","inst_36968","inst_36969","inst_36970","inst_36974","inst_36975","inst_36976","inst_36977","inst_36978","inst_36979","inst_36980","inst_36981","inst_36982","inst_36983","inst_36984","inst_36985","inst_36986","inst_36987","inst_36988","inst_37083","inst_37085","inst_37086","inst_37087","inst_37088","inst_37089","inst_37096","inst_37100","inst_37101","inst_37102","inst_37103","inst_37104","inst_37105","inst_37106","inst_37107","inst_37108","inst_37109","inst_37110","inst_37111","inst_37112","inst_37113","inst_37114","inst_37115","inst_37116","inst_37117","inst_37118","inst_37119","inst_37120","inst_37121","inst_37122","inst_37123","inst_37124","inst_37125","inst_37126","inst_37127","inst_37128","inst_37129","inst_37130","inst_37131","inst_37133","inst_37134","inst_37135","inst_37136","inst_37137","inst_37138","inst_37139","inst_37140","inst_37141","statearr-37289","statearr-37290","inst_37204","statearr-37291","inst_37151","inst_37146","inst_37152","statearr-37294","statearr-37296","statearr-37298","statearr-37300","statearr-37302","inst_37246","statearr-37303","inst_37255","statearr-37305","inst_37217","statearr-37306","statearr-37307","inst_37171","statearr-37308","statearr-37309","inst_37240","statearr-37310","inst_37225","inst_37226","inst_37227","inst_37228","inst_37229","inst_37230","inst_37231","inst_37232","cljs.core/not","statearr-37311","statearr-37312","inst_37209","inst_37210","inst_37211","inst_37212","inst_37213","statearr-37313","statearr-37314","inst_37261","inst_37252","statearr-37317","statearr-37318","inst_37144","statearr-37319","cljs.core.async.impl.ioc-helpers/take!","inst_37222","statearr-37383","inst_37220","statearr-37387","statearr-37388","inst_37192","inst_37194","inst_37195","inst_37196","inst_37198","inst_37199","statearr-37390","statearr-37391","statearr-37392","inst_37189","statearr-37393","statearr-37394","inst_37154","inst_37155","inst_37156","inst_37157","inst_37158","inst_37160","inst_37161","inst_37162","inst_37163","inst_37164","inst_37165","inst_37166","inst_37167","inst_37168","statearr-37402","statearr-37403","inst_37203","inst_37206","inst_37207","statearr-37407","statearr-37408","statearr-37409","statearr-37410","inst_37248","statearr-37411","statearr-37412","statearr-37413","inst_37257","statearr-37420","statearr-37421","inst_37173","inst_37175","inst_37176","inst_37177","inst_37178","inst_37179","inst_37180","inst_37181","inst_37182","inst_37183","inst_37184","inst_37185","inst_37186","statearr-37422","statearr-37423","statearr-37426","e37428","statearr-37429","statearr-37431","cljs.core.concat.cljs$core$IFn$_invoke$arity$2","cljs.core.update_in.cljs$core$IFn$_invoke$arity$4","cljs.core/conj","cljs.core.nth.cljs$core$IFn$_invoke$arity$2","cljs.core/rand-int","cljs.core.range.cljs$core$IFn$_invoke$arity$1","cljs.core/some","cljs.core.update_in.cljs$core$IFn$_invoke$arity$3","cljs.core/inc","p5","js/window","setup","canvas","txt","state_37441","state_val_37442","inst_37435","inst_37436","inst_37437","inst_37439","statearr-37446","e37448","statearr-37451","statearr-37452","keyPressed","state_37461","state_val_37462","inst_37454","inst_37455","inst_37456","inst_37457","inst_37459","statearr-37468","e37469","statearr-37470","statearr-37478","draw","cljs.core.dorun.cljs$core$IFn$_invoke$arity$1","seq__37484","cljs.core/seq","chunk__37485","count__37486","i__37487","vec__37511","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","map__37514","temp__5735__auto__","cljs.core/chunked-seq?","c__4550__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","vec__37522","cljs.core/first","map__37525","cljs.core/next","idx","origin","t","cljs.core/vector","cljs.core.range.cljs$core$IFn$_invoke$arity$0","vec__37516","vec__37519","vec__37527","vec__37530","x","y","ox","oy","showKey"],"sourcesContent":["(ns app.t2.main\r\n  (:require-macros\r\n    [cljs.core.async.macros :as am])\r\n  (:require [cljs.core.async :as a]))\r\n\r\n; \u5efa\u7acb\u76ee\u6a19\r\n(defn targetCreate [{pos :pos :as info}]\r\n  (merge \r\n    {:id (gensym) :pos pos :origin pos :startTime 0 :state :normal}\r\n    info))\r\n\r\n; \u76ee\u6a19\u5192\u982d\r\n(defn targetGo [{time :time :as ctx} target]\r\n  (if-not (= (:state target) :normal)\r\n    target\r\n    (merge target {:startTime time :state :go})))\r\n\r\n; \u66f4\u65b0\u76ee\u6a19\u72c0\u614b\r\n(defn targetUpdate [{time :time :as ctx} target]\r\n  (condp = (:state target)\r\n    ; \u5192\u982d\r\n    :go\r\n    ; \u8a08\u7b97\u7d93\u904e\u6642\u9593\u4e26\u4f7f\u7528\u5167\u63d2\u6cd5\u8a08\u7b97\u5192\u982d\u4f4d\u7f6e\r\n    (let [offsetTime (- time (:startTime target))\r\n          offsetY (-> offsetTime (min 500) (/ 1000) (* -50))]\r\n      (if (> offsetTime 500)\r\n        (merge target {:state :wait :startTime time})\r\n        (merge target {:pos (map + (:origin target) [0 offsetY])})))\r\n    ; \u7e2e\u982d\r\n    :goback\r\n    ; \u5c07\u5192\u982d\u7684\u8a08\u7b97\u65b9\u6cd5\u7528500\u53cd\u6e1b\u56de\u53bb\uff0c\u8a08\u7b97\u51fa\u5192\u982d\u5012\u53cd\u7684\u4f4d\u79fb\u3002\u6ce8\u610f\u9019\u88e1\u4f7f\u7528->>\r\n    (let [offsetTime (- time (:startTime target))\r\n          offsetY (->> offsetTime (min 500) (- 500) (* (/ 1 1000)) (* -50))]\r\n      (if (> offsetTime 500)\r\n        (merge target {:state :normal :pos (:origin target)})\r\n        (merge target {:pos (map + (:origin target) [0 offsetY])})))\r\n    ; \u7b49\u5f85\u6253\u64ca\r\n    :wait\r\n    (let [offsetTime (- time (:startTime target))]\r\n      (if (> offsetTime 500)\r\n        (merge target {:state :goback :startTime time})\r\n        target))\r\n    :normal\r\n    target\r\n    \r\n    target))\r\n\r\n; \u904a\u6232\u66f4\u65b0\r\n(defn step [ctx]\r\n  (let [; \u8655\u7406\u4e8b\u4ef6\r\n        handleEvents\r\n        (fn [ctx]\r\n          (reduce \r\n            (fn [ctx e]\r\n              (condp = (:type e)\r\n                ; \u6307\u5b9a\u76ee\u6a19\u5192\u982d\u4e8b\u4ef6\r\n                :go\r\n                (let [; \u53d6\u5f97\u5192\u982d\u76ee\u6a19\r\n                      targets (:targets e)\r\n                      ; \u66f4\u65b0\u70ba\u5192\u982d\u72c0\u614b\r\n                      targetsAfterEffect (map (partial targetGo ctx) targets)\r\n                      ; \u5efa\u7acb\u4fee\u6539\u8cc7\u6599\u7d50\u69cb\u7684\u5c0d\u6620\u8868\r\n                      replaceForm (zipmap targets targetsAfterEffect)\r\n                      ; \u4fee\u6539\u5f8c\u7684\u8cc7\u6599\r\n                      replaceTargets (replace replaceForm (:targets ctx))]\r\n                  ; \u61c9\u7528\u4fee\u6539\r\n                  (merge ctx {:targets replaceTargets}))\r\n                ctx))\r\n            (merge ctx {:events []})\r\n            (:events ctx)))\r\n        ; \u66f4\u65b0\u76ee\u6a19\r\n        handleTargets\r\n        (fn [ctx]\r\n          (merge ctx {:targets (map (partial targetUpdate ctx) (:targets ctx))}))\r\n        ; \u66f4\u65b0\u904a\u6232\u6642\u9593\r\n        handleTime\r\n        (fn [ctx]\r\n          (merge ctx {:time (-> (js/Date.) (.getTime))}))]\r\n    (-> ctx handleEvents handleTargets handleTime)))\r\n\r\n(defn main []\r\n  (def model nil)\r\n  (def evt (a/chan))\r\n  ; \u4f9d\u6253\u64ca\u9806\u5e8f\u5b9a\u7fa9\u6309\u9375\r\n  (def useKeys [\"q\" \"w\" \"e\" \"a\" \"s\" \"d\" \"z\" \"x\" \"c\"])\r\n  \r\n  (js/setInterval\r\n      (fn []\r\n        (am/go\r\n          (a/>! evt {:type :update})))\r\n      33)\r\n      \r\n  (js/setInterval\r\n      (fn []\r\n        (am/go\r\n          (a/>! evt {:type :randomGo})))\r\n      1000)\r\n  \r\n  (let [firstTarget (targetCreate {:pos [100 100]})]  \r\n    (am/go-loop [ctx {:time (-> (js/Date.) (.getTime))\r\n                      ; \u4f9d\u9806\u5e8f\u5efa\u7acb\u76ee\u6a19\uff0c\u6ce8\u610f\u5ea7\u6a19\u6709\u9806\u5e8f\r\n                      :targets (concat \r\n                                 [firstTarget]\r\n                                 [(targetCreate {:pos [200 100]})\r\n                                  (targetCreate {:pos [300 100]})\r\n                                  (targetCreate {:pos [100 200]})\r\n                                  (targetCreate {:pos [200 200]})\r\n                                  (targetCreate {:pos [300 200]})\r\n                                  (targetCreate {:pos [100 300]})\r\n                                  (targetCreate {:pos [200 300]})\r\n                                  (targetCreate {:pos [300 300]})])\r\n                      ; \u4e8b\u4ef6\u4f47\u5217\r\n                      :events [{:type :go :targets [firstTarget]}]\r\n                      :score 0}]\r\n      (set! model ctx)\r\n      (let [e (a/<! evt)]\r\n        (condp = (:type e)\r\n          ; \u6e2c\u8a66\u4e8b\u4ef6\r\n          :mousePressed\r\n          (recur\r\n            (update-in ctx [:events] conj {:type :go :targets [(nth (:targets ctx) 2) (nth (:targets ctx) 3)]}))\r\n          \r\n          ; \u96a8\u6a5f\u5192\u982d\u4e8b\u4ef6\r\n          :randomGo\r\n          (recur\r\n            (update-in ctx [:events] conj {:type :go :targets [(nth (:targets ctx) (rand-int 9))]}))\r\n          \r\n          ; \u6309\u9375\u6253\u64ca\r\n          :keyPressed\r\n          (let [; \u4f9d\u5b9a\u7fa9\u9375\u6309\u7684\u9806\u5e8f\u5c0b\u627e\u5c0d\u6620\u7684\u76ee\u6a19\r\n                key (:key e)\r\n                keyToIdx (zipmap useKeys (range 9))\r\n                idx (get keyToIdx key)]\r\n            (recur\r\n              (cond\r\n                (some (partial = key) useKeys)\r\n                (let [{state :state :as target} (nth (:targets ctx) idx)]\r\n                  ; \u5192\u982d\u548c\u7b49\u5f85\u72c0\u614b\u624d\u80fd\u5f97\u5206\r\n                  (if-not (some (partial = state) [:wait :go])\r\n                    ctx\r\n                    (update-in ctx [:score] inc)))\r\n                \r\n                :else\r\n                ctx)))\r\n          \r\n          (recur (step ctx))))))\r\n  \r\n  (let [p5 js/window\r\n        setup\r\n        (fn []\r\n          (let [canvas (.createCanvas p5 600 400)\r\n                txt (.createDiv p5 \"string\")]\r\n            (.mousePressed canvas\r\n              (fn []\r\n                (am/go\r\n                  (a/>! evt {:type :mousePressed}))))\r\n            (.parent canvas \"container\")\r\n            (.position txt 20 20)))\r\n        keyPressed\r\n        (fn []\r\n          (am/go\r\n            (a/>! evt {:type :keyPressed :key (.-key p5)})))\r\n        draw\r\n        (fn []\r\n          (.background p5 0)\r\n          (.fill p5 255)\r\n          (.stroke p5 100)\r\n          (when model\r\n            (dorun\r\n              (doseq [[idx, {pos :pos origin :origin :as t}] (map vector (range) (:targets model))]\r\n                (let [[x y] pos\r\n                      [ox oy] origin\r\n                      showKey (nth useKeys idx)]\r\n                  (.fill p5 255)\r\n                  (.ellipse p5 x y 50 50)\r\n                  (.rect p5 (- ox 25) (- oy 25) 50 50)\r\n                  \r\n                  (.fill p5 100 0 0)\r\n                  (.text p5 showKey ox oy))))\r\n            (.fill p5 255)\r\n            (.text p5 (str \"score:\" (:score model)) 50 20)))]\r\n    (set! (.-setup p5) setup)\r\n    (set! (.-draw p5) draw)\r\n    (set! (.-keyPressed p5) keyPressed)))\r\n\r\n(main)\r\n"]}