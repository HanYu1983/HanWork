{"version":3,"sources":["app2/main.cljs"],"mappings":"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","names":["app2.main/board","cljs.core.repeat.cljs$core$IFn$_invoke$arity$2","cljs.core.into.cljs$core$IFn$_invoke$arity$2","app2.main/lines","hs","iter__4523__auto__","s__26349","cljs.core/LazySeq","temp__5735__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__4521__auto__","size__4522__auto__","cljs.core/count","b__26351","cljs.core/chunk-buffer","i__26350","cljs.core._nth.cljs$core$IFn$_invoke$arity$2","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__26348","cljs.core/chunk-rest","cljs.core/first","cljs.core/cons","cljs.core/rest","x","cljs.core.range.cljs$core$IFn$_invoke$arity$1","vs","s__26353","b__26355","i__26354","iter__26352","y","x1","s__26357","xs__6292__auto__","iterys__4519__auto__","s__26359","b__26361","i__26360","iter__26358","fs__4520__auto__","cljs.core.concat.cljs$core$IFn$_invoke$arity$2","iter__26356","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","x2","s__26363","s__26365","b__26367","i__26366","iter__26364","iter__26362","cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic","app2.main/checkWin","board","player","cljs.core.map.cljs$core$IFn$_invoke$arity$2","line","cljs.core/every?","cljs.core.partial.cljs$core$IFn$_invoke$arity$2","cljs.core/=","pos","cljs.core.get_in.cljs$core$IFn$_invoke$arity$2","cljs.core/some","cljs.core/true?","app2.main/possibleActions","s__26369","s__26371","b__26373","i__26372","iter__26370","iter__26368","app2.main/log","a","cljs.core.print.cljs$core$IFn$_invoke$arity$variadic","app2.main/main","userInput","cljs.core.async.chan.cljs$core$IFn$_invoke$arity$0","data","cljs.core.atom.cljs$core$IFn$_invoke$arity$1","c__25042__auto__","cljs.core.async.chan.cljs$core$IFn$_invoke$arity$1","cljs.core.async.impl.dispatch/run","f__25043__auto__","switch__24997__auto__","state_26517","state_val_26518","inst_26513","statearr-26519","inst_26505","statearr-26520","inst_26374","inst_26375","inst_26376","inst_26377","cljs.core/PersistentHashMap","inst_26378","inst_26379","inst_26380","inst_26381","inst_26382","inst_26383","inst_26384","inst_26385","inst_26386","inst_26387","inst_26388","inst_26389","inst_26390","inst_26391","inst_26392","statearr-26521","statearr-26522","inst_26398","inst_26401","inst_26405","statearr-26523","statearr-26524","statearr-26525","inst_26418","inst_26424","inst_26425","inst_26426","inst_26427","inst_26428","cljs.core/PersistentVector","inst_26429","inst_26430","inst_26431","inst_26432","inst_26433","inst_26434","inst_26435","inst_26436","inst_26437","inst_26438","inst_26439","statearr-26526","statearr-26527","inst_26420","inst_26413","inst_26451","inst_26419","inst_26446","inst_26456","inst_26457","inst_26458","inst_26459","inst_26460","inst_26461","inst_26462","inst_26463","inst_26464","inst_26465","inst_26466","inst_26467","inst_26468","inst_26469","inst_26470","inst_26471","inst_26472","inst_26473","inst_26474","inst_26475","inst_26476","inst_26477","inst_26478","inst_26479","inst_26480","inst_26481","inst_26482","inst_26483","inst_26484","inst_26485","inst_26486","inst_26487","statearr-26528","statearr-26529","statearr-26530","inst_26453","inst_26490","inst_26491","inst_26492","inst_26493","inst_26494","inst_26495","inst_26496","inst_26497","inst_26498","inst_26499","inst_26500","statearr-26531","statearr-26532","inst_26411","statearr-26533","statearr-26534","inst_26507","statearr-26535","inst_26515","cljs.core.async.impl.ioc-helpers/return-chan","statearr-26536","inst_26394","inst_26395","inst_26396","inst_26397","inst_26399","statearr-26537","cljs.core.async.impl.ioc-helpers/take!","inst_26503","statearr-26538","inst_26445","inst_26452","inst_26454","statearr-26539","statearr-26540","statearr-26541","inst_26511","statearr-26542","inst_26414","statearr-26543","statearr-26544","statearr-26545","inst_26421","inst_26422","statearr-26547","statearr-26548","statearr-26549","inst_26442","inst_26443","inst_26444","inst_26447","statearr-26550","statearr-26551","statearr-26552","tmp26546","statearr-26554","statearr-26555","inst_26449","statearr-26556","inst_26408","tmp26553","statearr-26557","statearr-26558","statearr-26559","state-machine__24998__auto__","ret-value__24999__auto__","result__25000__auto__","cljs.core/keyword-identical?","e26560","js/Object","ex__25001__auto__","statearr-26561","cljs.core.async.impl.ioc-helpers/process-exception","state__25044__auto__","statearr-26562","cljs.core.async.impl.ioc-helpers/USER-START-IDX","cljs.core.async.impl.ioc-helpers/run-state-machine-wrapped","app2.brain/brain","cljs.core.async/timeout","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic","cljs.core.update_in.cljs$core$IFn$_invoke$arity$3","cljs.core/inc","app2.brain/clearState","app2.brain/selectAction","js/throw","app2.brain/updateQ","cljs.core/constantly","app2.brain/updateR","cljs.core/+","cljs.core/reset!","state","reagent.core.atom.cljs$core$IFn$_invoke$arity$1","active","result","state_26612","state_val_26613","inst_26576","inst_26567","inst_26574","inst_26578","inst_26570","inst_26582","pred__26564","expr__26565","inst_26583","inst_26584","cljs.core/deref","inst_26585","statearr-26614","statearr-26615","statearr-26616","statearr-26617","inst_26571","inst_26572","inst_26573","inst_26575","inst_26577","inst_26579","inst_26580","statearr-26618","statearr-26619","statearr-26620","inst_26595","statearr-26621","statearr-26622","inst_26608","statearr-26623","inst_26610","inst_26589","inst_26590","statearr-26624","statearr-26625","inst_26568","statearr-26626","statearr-26627","statearr-26628","statearr-26629","inst_26598","statearr-26630","inst_26600","inst_26602","inst_26603","inst_26604","inst_26605","statearr-26631","statearr-26632","statearr-26633","inst_26593","statearr-26634","e26635","statearr-26636","statearr-26637","model","brain","actions","bestAction","app2.brain/bestAction","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2","origin","app2.main/drawPlayground","s","ac","r","drawValue","v","pred__26638","expr__26639","G__26641","G__26642","G__26643","G__26644","pred__26645","expr__26646","G__26648","G__26649","s__26651","b__26653","i__26652","iter__26650","s__26655","b__26657","i__26656","iter__26654","reagent.core.render.cljs$core$IFn$_invoke$arity$2","js/document","tmodel","table","state_26673","state_val_26674","statearr-26675","inst_26659","inst_26660","inst_26661","inst_26662","inst_26663","inst_26664","inst_26665","inst_26666","statearr-26676","inst_26671","inst_26668","statearr-26677","statearr-26678","statearr-26679","e26680","statearr-26681","statearr-26682","app2.main/drawQtable","tm","t","cljs.core/not","s__26684","vec__26689","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","s__26686","b__26688","i__26687","vec__26692","iter__26685","vec__26695","iter__26683","sub","action","value","app2.main/mountit","cljs.core/chunk-first"],"sourcesContent":["(ns app2.main\r\n  (:require [app2.brain :as b]\r\n            [clojure.core.async :as a]\r\n            [reagent.core :as r])\r\n  (:require-macros [clojure.core.async :as am]))\r\n\r\n\r\n(def board (->>\r\n            (repeat 3 nil)\r\n            (into [])\r\n            (repeat 3)\r\n            (into [])))\r\n\r\n(def lines\r\n  (let [hs (for [x (range 3)] [[0 x] [1 x] [2 x]])\r\n        vs (for [y (range 3)] [[y 0] [y 1] [y 2]])\r\n        x1  (for [x (range 3) y (range 3) :when (= x y)] [y x])\r\n        x2 (for [x (range 3) y (range 3) :when (= 2 (+ x y))] [y x])]\r\n    (concat hs vs [x1] [x2])))\r\n\r\n(defn checkWin [board player]\r\n  (->> lines\r\n       (map (fn [line]\r\n              (every?\r\n               (partial = player)\r\n               (map (fn [pos]\r\n                      (get-in board pos))\r\n                    line))))\r\n       (some true?)))\r\n\r\n(defn possibleActions [board]\r\n  (for [x (range 3) y (range 3) :when (->> (get-in board [y x]) nil?)]\r\n    [y x]))\r\n\r\n(defn log [a]\r\n  (print a)\r\n  a)\r\n\r\n(defn main []\r\n  \r\n  (let [userInput (a/chan)\r\n        data (atom nil)]\r\n    \r\n    ; \u8a13\u7df4\u982d\u8166\r\n    (am/go-loop [model {:players {:player :ai\r\n                                  :enemy :ai}\r\n                        :active :player\r\n                        :playerInfos {:player {:brain b/brain}\r\n                                      :enemy {:brain b/brain}}\r\n                        :board board\r\n                        :result {:player 0 :enemy 0 :draw 0}}]\r\n      (let [currPlayerType (get-in model [:players (:active model)])]\r\n        (a/<! (a/timeout 10))\r\n        (condp = currPlayerType\r\n          :player\r\n          (let [input (a/<! userInput)]\r\n            (recur model))\r\n\r\n          :ai\r\n          (let [activePlayer (:active model)\r\n                oppositePlayer (if (= activePlayer :player) :enemy :player)\r\n                state (:board model)\r\n                actions (possibleActions state)]\r\n            (if (= 0 (count actions))\r\n              ; \u5e73\u624b\r\n              (recur (-> model\r\n                         (merge {:board board\r\n                                 :active oppositePlayer})\r\n                         (update-in [:result :draw] inc)\r\n                         (update-in [:playerInfos :player :brain] b/clearState)\r\n                         (update-in [:playerInfos :enemy :brain] b/clearState)))\r\n              (let [brain (get-in model [:playerInfos activePlayer :brain])\r\n                    action (b/selectAction brain state actions)]\r\n                (if (get-in state action)\r\n                  (js/throw \"\u4f4d\u7f6e\u5df2\u88ab\u4e0b\u904e. \u9019\u88e1\u4e0d\u8a72\u88ab\u57f7\u884c\u5230\")\r\n                  (let [nextBrain (b/updateQ brain state action actions)\r\n                        nextState (update-in state action (constantly activePlayer))\r\n                        isWin (checkWin nextState activePlayer)]\r\n                    (if isWin\r\n                      ; \u4e3b\u52d5\u73a9\u5bb6\u52dd\r\n                      (let [; \u52a0\u5206\r\n                            nextBrain (-> nextBrain\r\n                                          (b/updateR (partial + 10))\r\n                                          (b/updateQ state action actions)\r\n                                          (b/clearState))\r\n                            ; \u5c0d\u624b\u6e1b\u5206\r\n                            oppositeBrain (-> (get-in model [:playerInfos oppositePlayer :brain])\r\n                                              (b/updateR (partial + (- 100)))\r\n                                              (b/updateQ nil nil actions)\r\n                                              (b/clearState))\r\n                            ; \u6e05\u5834\r\n                            nextState board]\r\n                        ; \u8a18\u9304\u8a13\u7df4\u7d50\u679c, \u9019\u500b\u7d50\u679c\u7528\u4f86\u5c55\u793a\r\n                        (reset! data model)\r\n                        (recur (-> model\r\n                                   (merge {:board nextState\r\n                                           :active oppositePlayer})\r\n                                   (update-in [:playerInfos activePlayer :brain] (constantly nextBrain))\r\n                                   (update-in [:playerInfos oppositePlayer :brain] (constantly oppositeBrain))\r\n                                   (update-in [:result activePlayer] inc))))\r\n                      ; \u9084\u6c92\u5206\u51fa\u52dd\u8ca0\r\n                      (let [; \u52a0\u5206\r\n                            nextBrain (-> nextBrain\r\n                                          (b/updateR (partial + 1)))]\r\n                        (recur (-> model\r\n                                   (merge {:board nextState\r\n                                           :active oppositePlayer})\r\n                                   (update-in [:playerInfos activePlayer :brain] (constantly nextBrain)))))))))))\r\n\r\n          (recur model))))\r\n\r\n    ; \u548c\u8a13\u7df4\u4e2d\u7684\u982d\u8166\u5c0d\u4e0b\u7684\u4e92\u52d5\u4ecb\u9762\r\n    (let [state (r/atom board)\r\n          active (r/atom :player)\r\n          result (r/atom nil)]\r\n      ; \u96fb\u8166\u884c\u70ba\r\n      ; \u7b49\u5f85\u73a9\u5bb6\u4e0b\u5b50\u5f8c\u4e0b\u5b50\r\n      (am/go-loop []\r\n        (condp = @active\r\n          :enemy\r\n          (let [model @data\r\n                brain (get-in model [:playerInfos :enemy :brain])\r\n                actions (possibleActions @state)\r\n                bestAction (b/bestAction brain @state actions)]\r\n            (if (> (count actions) 0)\r\n              ; \u9084\u6709\u4e0b\u5b50\u7a7a\u9593, \u4e0b\u5b50\u4e26\u5207\u63db\u73a9\u5bb6\r\n              (do (swap! state (fn [origin]\r\n                                 (update-in origin bestAction (constantly :enemy))))\r\n                  (reset! active (if (= :player @active) :enemy :player))\r\n                  (recur))\r\n              ; \u6c92\u6709\u4e0b\u5b50\u7a7a\u9593, \u7b49\u5f85\r\n              (do\r\n                (a/<! (a/timeout 1000))\r\n                (recur))))\r\n          \r\n          ; \u9592\u7f6e\u6642\u66f4\u65b0\u8a13\u7df4\u8cc7\u6599\u7684\u986f\u793a\r\n          (do\r\n            (a/<! (a/timeout 1000))\r\n            (reset! result (:result @data))\r\n            (recur))))\r\n\r\n      ; \u76e4\u9762\r\n      (defn drawPlayground []\r\n        (let [s @state\r\n              ac @active\r\n              r @result\r\n              drawValue (fn [y x]\r\n                          (let [v (get-in s [y x])]\r\n                            (condp = v\r\n                              :player \"O\"\r\n                              :enemy \"X\"\r\n                              [:button\r\n                               {:on-click #(do\r\n                                             (swap! state (fn [origin]\r\n                                                            (update-in origin [y x] (constantly :player))))\r\n                                             (reset! active (if (= :player @active) :enemy :player)))}\r\n                               \"O\"])))]\r\n          [:div\r\n           [:button {:on-click #(reset! state board)} \"clear\"]\r\n           [:div (str s)]\r\n           [:div (str \"active \" ac)]\r\n           [:div (str r)]\r\n           [:table {:border 1}\r\n            [:tbody\r\n             (condp = ac\r\n               :player\r\n               (for [y (range 3)]\r\n                 ^{:key (str y)}\r\n                 [:tr\r\n                  [:td (drawValue y 0)]\r\n                  [:td (drawValue y 1)]\r\n                  [:td (drawValue y 2)]])\r\n\r\n               (for [y (range 3)]\r\n                 ^{:key (str y)}\r\n                 [:tr\r\n                  [:td (drawValue y 0)]\r\n                  [:td (drawValue y 1)]\r\n                  [:td (drawValue y 2)]]))]]]))\r\n\r\n      (r/render [drawPlayground]\r\n                (.getElementById js/document \"playground\")))\r\n\r\n    ; \u982d\u8166\u7684\u8a13\u7df4\u7d50\u679c\r\n    (let [tmodel (r/atom false)\r\n          table (r/atom {})]\r\n\r\n      ; \u6bcf\u79d2\u540c\u6b65\u8cc7\u6599\r\n      (am/go-loop []\r\n        (let [model @data\r\n              brain (get-in model [:playerInfos :enemy :brain])]\r\n          (reset! table (:q brain))\r\n          (<! (a/timeout 1000))\r\n          (recur)))\r\n\r\n      (defn drawQtable []\r\n        (let [tm @tmodel\r\n              t @table]\r\n          (if tm\r\n            [:div\r\n             [:button {:on-click #(swap! tmodel not)} \"close\"]\r\n             [:table {:border 1}\r\n              [:tbody\r\n               (for [[state sub] t\r\n                     [action value] sub]\r\n                 ^{:key (str state \" \" action)}\r\n                 [:tr\r\n                  [:td (str state)]\r\n                  [:td (str action)]\r\n                  [:td {:style {:background-color (if (< value 0)\r\n                                                    \"red\"\r\n                                                    (if (> value 5)\r\n                                                      \"green\"\r\n                                                      \"white\"))}} (str value)]])]]]\r\n            [:button {:on-click #(swap! tmodel not)} \"open\"])))\r\n\r\n      (defn mountit []\r\n        (r/render [drawQtable]\r\n                  (.getElementById js/document \"qtable\")))\r\n\r\n      (mountit))))"]}