{"version":3,"sources":["app/t5/main.cljs"],"mappings":"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","names":["app.t5.main/p5","js/window","app.t5.main/w","app.t5.main/h","app.t5.main/cellW","app.t5.main/cellH","app.t5.main/emptyCell","app.t5.main/spawnPos","app.t5.main/dropSpd","app.t5.main/cells","cljs.core.repeat.cljs$core$IFn$_invoke$arity$1","cljs.core.take.cljs$core$IFn$_invoke$arity$2","cljs.core.into.cljs$core$IFn$_invoke$arity$2","app.t5.main/shapes","app.t5.main/rotate90","s","cljs.core.map.cljs$core$IFn$_invoke$arity$2","p__37950","vec__37952","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","x","y","app.t5.main/rotate180","p__37967","vec__37969","app.t5.main/rotate","type","dir","pred__37972","expr__37973","cljs.core/=","cljs.core/some","cljs.core.partial.cljs$core$IFn$_invoke$arity$2","pred__37975","expr__37976","p__37993","vec__37995","app.t5.main/pos2cr","pos","app.t5.main/isCollide","ctx","shape","p__38005","vec__38010","c","r","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","cljs.core.get_in.cljs$core$IFn$_invoke$arity$2","app.t5.main/collide","vec__38022","vec__38025","p1__38015#","cr","cljs.core.get.cljs$core$IFn$_invoke$arity$2","shapeWithPos","cljs.core.map.cljs$core$IFn$_invoke$arity$3","cljs.core/+","findEmpty","or","cljs.core/not","topR","fixedShape","applyFixedShape","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","p__38078","vec__38079","cljs.core/>","cljs.core.update_in.cljs$core$IFn$_invoke$arity$3","cljs.core/constantly","randomNext","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic","cljs.core/rand-int","cljs.core/count","app.t5.main/eatLine","nextCells","cells","line","cljs.core/every?","cljs.core/complement","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","offset","cljs.core/conj","app.t5.main/handleInput","key","pred__38175","expr__38176","vec__38179","vec__38182","p1__38143#","nextCr","nextShape","cljs.core.partial.cljs$core$IFn$_invoke$arity$3","cljs.core/map","vec__38190","vec__38193","p1__38154#","vec__38201","vec__38204","p1__38172#","nextDir","cljs.core/mod","p1__38174#","app.t5.main/dropShape","app.t5.main/step","p__38216","vec__38217","app.t5.main/drawShape","p5","px","py","cljs.core.dorun.cljs$core$IFn$_invoke$arity$1","seq__38221","cljs.core/seq","chunk__38222","count__38223","i__38224","temp__5735__auto__","cljs.core/chunked-seq?","c__4550__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/first","cljs.core/next","vec__38241","vec__38258","app.t5.main/fillShapeColor","pred__38299","expr__38300","app.t5.main/main","app.t5.main/model","app.t5.main/evt","cljs.core.async.chan.cljs$core$IFn$_invoke$arity$0","c__30213__auto__","cljs.core.async.chan.cljs$core$IFn$_invoke$arity$1","cljs.core.async.impl.dispatch/run","f__30214__auto__","switch__30004__auto__","state_38398","state_val_38399","inst_38394","statearr-38409","inst_38358","inst_38359","inst_38363","inst_38364","inst_38365","inst_38366","cljs.core/PersistentHashMap","inst_38367","inst_38368","inst_38369","statearr-38411","statearr-38413","inst_38373","inst_38377","inst_38379","statearr-38416","statearr-38422","statearr-38423","inst_38385","statearr-38426","statearr-38427","inst_38396","cljs.core.async.impl.ioc-helpers/return-chan","inst_38371","statearr-38431","cljs.core.async.impl.ioc-helpers/take!","tmp38428","statearr-38432","statearr-38433","inst_38381","inst_38382","statearr-38441","statearr-38446","inst_38392","statearr-38447","inst_38387","statearr-38448","statearr-38456","statearr-38464","state-machine__30005__auto__","ret-value__30006__auto__","result__30007__auto__","cljs.core/keyword-identical?","e38467","js/Object","ex__30008__auto__","statearr-38468","cljs.core.async.impl.ioc-helpers/process-exception","state__30215__auto__","statearr-38474","cljs.core.async.impl.ioc-helpers/USER-START-IDX","cljs.core.async.impl.ioc-helpers/run-state-machine-wrapped","canvas","iter__4523__auto__","s__38493","cljs.core/LazySeq","xs__6292__auto__","iterys__4519__auto__","s__38495","c__4521__auto__","size__4522__auto__","b__38497","cljs.core/chunk-buffer","i__38496","cljs.core._nth.cljs$core$IFn$_invoke$arity$2","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__38494","cljs.core/cons","cljs.core/rest","fs__4520__auto__","cljs.core.concat.cljs$core$IFn$_invoke$arity$2","iter__38492","cljs.core.range.cljs$core$IFn$_invoke$arity$1","vec__38569","p1__38312#","js/setInterval","state_38584","state_val_38585","inst_38578","inst_38579","inst_38580","cljs.core.async.impl.ioc-helpers/put!","inst_38582","statearr-38610","e38611","statearr-38612","statearr-38613","state_38627","state_val_38628","inst_38617","inst_38621","inst_38622","inst_38623","inst_38625","statearr-38636","e38637","statearr-38638","statearr-38639","state_38683","state_val_38684","inst_38676","inst_38677","inst_38678","inst_38679","inst_38681","statearr-38696","e38704","statearr-38705","statearr-38710"],"sourcesContent":["(ns app.t5.main\r\n  (:require-macros\r\n    [cljs.core.async.macros :as am])\r\n  (:require [cljs.core.async :as a]))\r\n\r\n(def p5 js/window)\r\n\r\n; =====\r\n; MODEL\r\n; =====\r\n\r\n(def w 10)\r\n(def h 30)\r\n(def cellW (/ 100 w))\r\n(def cellH (/ 300 h))\r\n(def emptyCell -1)\r\n(def spawnPos [40 20])\r\n(def dropSpd 3)\r\n\r\n; \u5efa\u7acb\u80cc\u666f\u5340\u584a\r\n(def cells \r\n  (->> emptyCell\r\n       repeat\r\n       (take w)\r\n       (into [])\r\n       repeat\r\n       (take h)\r\n       (into [])))\r\n\r\n; \u5b9a\u7fa9\u65b9\u584a\r\n; \u56e0\u78b0\u649e\u6f14\u7b97\u6cd5\u7684\u9650\u5236\uff0cy\u4e0d\u5f97\u5c0f\u65bc-2\r\n(def shapes [[[-1 -1] [0 -1] [-1 0] [0 0]]\r\n             [[0 -2] [0 -1] [0 0] [0 1]]\r\n             [[-1 -1] [0 -1] [0 0] [0 1]]\r\n             [[1 -1] [0 -1] [0 0] [0 1]]\r\n             [[0 -1] [0 0] [-1 0] [1 0]]])\r\n\r\n(defn rotate90 [s]\r\n  (into [] (map (fn [[x y]]\r\n                  [(- y) x]) s)))\r\n\r\n(defn rotate180 [s]\r\n  (into [] (map (fn [[x y]] \r\n                  [(- x) (- y)]) s)))\r\n\r\n; \u65cb\u8f49\u65b9\u584a\r\n(defn rotate [type dir s]\r\n  (condp = type\r\n    ; 0\u4ee3\u8868\u6b63\u65b9\u5f62\uff0c\u4e0d\u5fc5\u65cb\u8f49\r\n    0 s\r\n    ; 1\u662f\u9577\u689d\u5f62\uff0c\u53ea\u5206\u5782\u76f4\u548c\u6c34\u5e73\r\n    1 (cond\r\n        (some (partial = dir) [1 3])\r\n        (rotate90 s)\r\n        \r\n        :else\r\n        s)\r\n    ; \u5176\u5b83\u7684\u5f62\u72c0\u5c31\u5fc5\u9808\u8655\u74064\u500b\u65b9\u5411\r\n    (condp = dir\r\n      0 s\r\n      1 (rotate180 (rotate90 s))\r\n      2 (rotate180 s)\r\n      3 (rotate90 s)\r\n      s)))\r\n\r\n; \u5c07\u50cf\u7d20\u5ea7\u6a19\u6539\u70ba\u5340\u584a\u7684\u884c\u5217\u5ea7\u6a19\r\n; \u9019\u88e1\u8981\u6ce8\u610f\uff0c\u5217\u6578\u6703\u984d\u5916\u52a01\u3002\u56e0\u70ba\u6bcf\u500b\u65b9\u584a\u662f\u4ee5\u5de6\u4e0a\u89d2\u70ba\u9328\u9ede\uff0c\u52a01\u4ee3\u8868\u9328\u9ede\u6539\u70ba\u5de6\u4e0b\u89d2\uff0c\u9019\u6a23\u8a08\u7b97\u78b0\u649e\u6703\u6bd4\u8f03\u6b63\u78ba\r\n(defn pos2cr [[x y :as pos]]\r\n  [(int (/ x cellW)) (inc (int (/ y cellH)))])\r\n\r\n; \u8a08\u7b97\u662f\u5426\u6709\u78b0\u40e5\r\n(defn isCollide [ctx shape]\r\n  (some \r\n    (fn [[c r]] \r\n      (not (= emptyCell (get-in ctx [:cells r c])))) \r\n    shape))\r\n\r\n; \u8655\u7406\u78b0\u649e\r\n(defn collide [ctx]\r\n  (let [[type dir pos] (map #(get-in ctx [:drop %]) [:type :dir :pos])\r\n        [c r :as cr] (pos2cr pos)\r\n        shape (->> (get shapes type) (rotate type dir))\r\n        shapeWithPos (map (fn [s] (map + cr s)) shape)\r\n        ; \u5c0b\u627e\u4e0a\u65b9\u4e0d\u6703\u78b0\u649e\u7684\u7a7a\u9593\r\n        findEmpty (fn [shape or]\r\n                    (if (<= or 0)\r\n                      or\r\n                      (let [shapeWithPos (map (fn [s] (map + [c or] s)) shape)]\r\n                        (if (not (isCollide ctx shapeWithPos))\r\n                          or\r\n                          (recur shape (dec or))))))]\r\n    (if-not (isCollide ctx shapeWithPos)\r\n      ctx\r\n      (let [; \u627e\u51fa\u65b9\u584a\u843d\u4e0b\u7684\u884c\u5217\u5ea7\u6a19\r\n            topR (findEmpty shape (dec r))\r\n            ; \u65b9\u584a\u5728\u80cc\u666f\u5340\u584a\u6240\u4f54\u64da\u7684\u4f4d\u7f6e\r\n            fixedShape (map (fn [s] (map + [c topR] s)) shape)\r\n            ; \u4f54\u64da\u4f4d\u7f6e\r\n            applyFixedShape (fn [ctx]\r\n                              (reduce\r\n                                (fn [ctx [c r]]\r\n                                  ; \u884c\u5217\u5ea7\u6a19\u5c0f\u65bc0\u7684\u4e0d\u8655\u7406\r\n                                  (if (some (partial > 0) [c r])\r\n                                    ctx\r\n                                    (update-in ctx [:cells r c] (constantly type)))) \r\n                                ctx\r\n                                fixedShape))\r\n            ; \u6210\u751f\u4e0b\u4e00\u500b\u65b9\u584a\r\n            randomNext (fn [ctx] (merge ctx {:drop {:pos spawnPos \r\n                                                    :type (rand-int (count shapes))\r\n                                                    :dir 0}}))]\r\n        (-> ctx\r\n            applyFixedShape\r\n            randomNext)))))\r\n\r\n; \u5403\u6389\u6eff\u683c\u7684\u5217\r\n(defn eatLine [ctx]\r\n  (let [; \u5148\u53bb\u9664\u6eff\u683c\u7684\u5217\r\n        nextCells (reduce\r\n                    (fn [cells line]\r\n                      (if (every? (complement (partial = emptyCell)) line)\r\n                        cells\r\n                        (conj cells line)))\r\n                    []    ;\u4f7f\u7528[]\u4f7f\u9806\u5e8f\u4e00\u81f4\uff0c\u4ee3\u8868reduce\u662f\u5f9e\u524d\u9762\u958b\u59cb\r\n                    (:cells ctx))\r\n        ; \u8a08\u7b97\u9700\u8981\u56de\u88dc\u5e7e\u884c\r\n        offset (- h (count nextCells))]\r\n    ; \u82e5\u4e0d\u9700\u56de\u88dc\u5c31\u76f4\u63a5\u56de\u50b3\r\n    (if (<= offset 0)\r\n      ctx\r\n      ; \u5c07\u7a7a\u767d\u884c\u585e\u5230\u524d\u9762\r\n      (merge ctx {:cells (reduce\r\n                           conj\r\n                           (->> emptyCell\r\n                                repeat\r\n                                (take w)\r\n                                (into [])\r\n                                repeat\r\n                                (take offset)\r\n                                (into []))\r\n                           nextCells)}))))\r\n\r\n; \u8655\u7406\u8f38\u5165\r\n(defn handleInput [key ctx]\r\n  (condp = key\r\n    \"a\"\r\n    (let [[type dir pos] (map #(get-in ctx [:drop %]) [:type :dir :pos])\r\n          [c r :as cr] (pos2cr pos)\r\n          shape (->> (get shapes type) (rotate type dir))\r\n          nextCr (map + cr [-1 0])\r\n          nextShape (map (fn [s] (map + nextCr s)) shape)]\r\n      (if (isCollide ctx nextShape)\r\n        ctx\r\n        (update-in ctx [:drop :pos] (partial map + [(- cellW) 0]))))\r\n    \r\n    \"d\"\r\n    (let [[type dir pos] (map #(get-in ctx [:drop %]) [:type :dir :pos])\r\n          [c r :as cr] (pos2cr pos)\r\n          shape (->> (get shapes type) (rotate type dir))\r\n          nextCr (map + cr [1 0])\r\n          nextShape (map (fn [s] (map + nextCr s)) shape)]\r\n      (if (isCollide ctx nextShape)\r\n        ctx\r\n        (update-in ctx [:drop :pos] (partial map + [(+ cellW) 0]))))\r\n    \r\n    \" \"\r\n    (let [[type dir pos] (map #(get-in ctx [:drop %]) [:type :dir :pos])\r\n          [c r :as cr] (pos2cr pos)\r\n          nextDir (mod (inc dir) 4)\r\n          shape (->> (get shapes type) (rotate type nextDir))\r\n          nextShape (map (fn [s] (map + cr s)) shape)]\r\n      (if (isCollide ctx nextShape)\r\n        ctx\r\n        (update-in ctx [:drop :dir] #(mod (inc %) 4))))\r\n    \r\n    ctx))\r\n    \r\n; \u8655\u7406\u4e0b\u964d\u65b9\u584a\r\n(defn dropShape [ctx]\r\n  (update-in ctx [:drop :pos] (partial map + [0 dropSpd])))\r\n\r\n(defn step [ctx]\r\n  (-> ctx\r\n      dropShape\r\n      collide\r\n      eatLine))\r\n\r\n; ====\r\n; VIEW\r\n; ====\r\n\r\n; \u756b\u65b9\u584a\r\n(defn drawShape [p5 shape [px py :as pos]]\r\n  (dorun\r\n    (doseq [s shape]\r\n      (let [[x y] s]\r\n        (.rect p5 (+ px (* cellW x)) (+ py (* cellH y)) cellW cellH)))))\r\n\r\n; \u8a2d\u5b9a\u65b9\u584a\u984f\u8272\r\n(defn fillShapeColor [p5 type]\r\n  (condp = type\r\n    0\r\n    (.fill p5 255 0 0)\r\n    \r\n    1\r\n    (.fill p5 0 255 0)\r\n    \r\n    2\r\n    (.fill p5 0 0 255)\r\n    \r\n    3\r\n    (.fill p5 128 128 0)\r\n    \r\n    4\r\n    (.fill p5 128 0 128)\r\n    \r\n    (.fill p5 255)))\r\n\r\n(defn main []\r\n  (def model nil)\r\n  (def evt (a/chan))\r\n  \r\n  ; \u904a\u6232\u8ff4\u5708\r\n  (am/go-loop [ctx {:cells cells\r\n                    :drop {:pos spawnPos \r\n                           :type (rand-int (count shapes)) \r\n                           :dir 0}}]\r\n    (set! model ctx)\r\n    (let [e (a/<! evt)]\r\n      (condp = (:type e)\r\n        :keyPressed\r\n        (recur (handleInput (:key e) ctx))\r\n\r\n        :update\r\n        (recur (step ctx))\r\n        \r\n        (recur ctx))))\r\n  \r\n  (set! (.-setup p5)\r\n        (fn []\r\n          (let [canvas (.createCanvas p5 100 300)]\r\n            (.parent canvas \"container\"))))\r\n  \r\n  (set! (.-draw p5)\r\n        (fn []\r\n          (.fill p5 255)\r\n          (.stroke p5 0)\r\n          (.rect p5 0 0 (dec 100) (dec 300))\r\n          (when model\r\n        ; \u80cc\u666f\u5340\u584a\r\n        ; \u4f7f\u7528dorun\u4f86\u5f37\u5236\u58ae\u6027\u5e8f\u5217\u6c42\u503c\r\n            (dorun\r\n             (for [x (range w) y (range h)]\r\n               (let [type (get-in model [:cells y x])]\r\n                 (when (> type emptyCell)\r\n                   (fillShapeColor p5 type)\r\n                   (.stroke p5 0)\r\n                   (.rect p5 (* cellW x) (* cellH y) cellW cellH)))))\r\n        ; \u4e0b\u843d\u4e2d\u7684\u65b9\u584a\r\n            (let [[type dir pos] (map #(get-in model [:drop %]) [:type :dir :pos])\r\n                  shape (->> (get shapes type) (rotate type dir))]\r\n              (fillShapeColor p5 type)\r\n              (drawShape p5 shape pos)))))\r\n  \r\n  ; =====\r\n  ; EVENT\r\n  ; =====\r\n  \r\n  (js/setInterval\r\n   (fn []\r\n     (am/go\r\n       (a/>! evt {:type :update})))\r\n   33)\r\n  \r\n  (set! (.-keyPressed p5)\r\n        (fn []\r\n          (am/go\r\n            (a/>! evt {:type :keyPressed :key (.-key p5)}))))\r\n  \r\n  (set! (.-keyReleased p5)\r\n        (fn []\r\n          (am/go\r\n            (a/>! evt {:type :keyReleased :key (.-key p5)})))))\r\n\r\n(main)\r\n"]}