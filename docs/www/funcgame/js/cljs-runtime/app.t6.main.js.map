{"version":3,"sources":["app/t6/main.cljs"],"mappings":"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","names":["app.t6.main/p5","js/window","app.t6.main/cw","app.t6.main/ch","app.t6.main/w","app.t6.main/h","app.t6.main/mineCnt","app.t6.main/gw","app.t6.main/gh","app.t6.main/mine","cljs.core.concat.cljs$core$IFn$_invoke$arity$2","cljs.core.repeat.cljs$core$IFn$_invoke$arity$2","cljs.core/shuffle","cljs.core.partition.cljs$core$IFn$_invoke$arity$2","cljs.core.map.cljs$core$IFn$_invoke$arity$2","cljs.core.partial.cljs$core$IFn$_invoke$arity$2","cljs.core/into","cljs.core.into.cljs$core$IFn$_invoke$arity$2","app.t6.main/cells","iter__4523__auto__","s__36572","cljs.core/LazySeq","temp__5735__auto__","cljs.core/seq","xs__6292__auto__","cljs.core/first","iterys__4519__auto__","s__36574","cljs.core/chunked-seq?","c__4521__auto__","size__4522__auto__","cljs.core/count","b__36576","cljs.core/chunk-buffer","i__36575","cljs.core._nth.cljs$core$IFn$_invoke$arity$2","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__36573","cljs.core/chunk-rest","cljs.core/cons","cljs.core/rest","fs__4520__auto__","iter__36571","y","cljs.core.range.cljs$core$IFn$_invoke$arity$1","x","isMine","cljs.core.get_in.cljs$core$IFn$_invoke$arity$2","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","borders","cljs.core.partial.cljs$core$IFn$_invoke$arity$3","cljs.core/map","cljs.core/+","lazyBorderMineCnt","cljs.core/get-in","cljs.core.filter.cljs$core$IFn$_invoke$arity$2","cljs.core/=","p__36603","vec__36604","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","app.t6.main/flag","r","c","rc","ctx","s","pred__36607","expr__36608","G__36610","G__36611","G__36612","G__36613","cljs.core.update_in.cljs$core$IFn$_invoke$arity$3","cljs.core/constantly","p__36614","vec__36615","app.t6.main/flip","v","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","p__36618","vec__36625","offset","G__36630","G__36631","cljs.core.map.cljs$core$IFn$_invoke$arity$3","app.t6.main/drawOpen","p5","w","h","pred__36634","expr__36635","size","x__4222__auto__","y__4223__auto__","vec__36639","g","b","pred__36642","expr__36643","js/Error","app.t6.main/drawFlag","app.t6.main/main","app.t6.main/model","app.t6.main/evt","cljs.core.async.chan.cljs$core$IFn$_invoke$arity$0","c__30812__auto__","cljs.core.async.chan.cljs$core$IFn$_invoke$arity$1","cljs.core.async.impl.dispatch/run","f__30813__auto__","switch__30584__auto__","state_36758","state_val_36759","inst_36744","statearr-36780","inst_36656","inst_36659","cljs.core/PersistentVector","inst_36665","inst_36667","inst_36668","inst_36669","inst_36670","inst_36671","inst_36672","inst_36673","inst_36674","cljs.core/PersistentHashMap","inst_36675","statearr-36782","statearr-36783","inst_36681","inst_36689","inst_36691","statearr-36785","statearr-36787","statearr-36789","inst_36738","statearr-36790","tmp36784","statearr-36794","statearr-36796","inst_36747","cljs.core.async.impl.ioc-helpers/return-chan","tmp36792","statearr-36799","statearr-36800","inst_36677","statearr-36801","cljs.core.async.impl.ioc-helpers/take!","inst_36711","inst_36733","statearr-36805","statearr-36806","inst_36703","inst_36729","statearr-36807","statearr-36808","inst_36698","inst_36700","inst_36701","inst_36707","inst_36709","inst_36710","inst_36717","statearr-36812","statearr-36813","statearr-36814","inst_36740","statearr-36815","inst_36725","statearr-36816","statearr-36818","statearr-36820","state-machine__30585__auto__","ret-value__30586__auto__","result__30587__auto__","cljs.core/keyword-identical?","e36822","js/Object","ex__30588__auto__","statearr-36837","cljs.core.async.impl.ioc-helpers/process-exception","state__30814__auto__","statearr-36840","cljs.core.async.impl.ioc-helpers/USER-START-IDX","cljs.core.async.impl.ioc-helpers/run-state-machine-wrapped","canvas","cljs.core.dorun.cljs$core$IFn$_invoke$arity$1","s__36843","s__36845","b__36847","i__36846","iter__36844","iter__36842","state_36939","state_val_36940","inst_36919","inst_36920","inst_36921","inst_36922","inst_36923","inst_36924","inst_36925","inst_36926","inst_36927","inst_36928","inst_36929","inst_36930","inst_36931","inst_36932","inst_36933","inst_36934","inst_36935","cljs.core.async.impl.ioc-helpers/put!","inst_36937","statearr-36941","e36942","statearr-36943","statearr-36944","cljs.core.keyword.cljs$core$IFn$_invoke$arity$1","cljs.core/chunk-first"],"sourcesContent":["(ns app.t6.main\r\n  (:require-macros\r\n    [cljs.core.async.macros :as am])\r\n  (:require [cljs.core.async :as a]))\r\n\r\n(def p5 js/window)\r\n\r\n; \u756b\u5e03\u5927\u5c0f\r\n(def cw 600)\r\n(def ch 600)\r\n; \u884c\u5217\u6578\r\n(def w 30)\r\n(def h 30)\r\n; \u5730\u96f7\u6578\r\n(def mineCnt 100)\r\n(def gw (int (/ cw w)))\r\n(def gh (int (/ ch h)))\r\n\r\n; =====\r\n; MODEL\r\n; =====\r\n\r\n; \u5b89\u6392\u5730\u96f7\r\n(def mine (->> \r\n               (concat \r\n                 (repeat mineCnt 1) \r\n                 (repeat (- (* w h) mineCnt) 0))\r\n               shuffle\r\n               (partition w)\r\n               (map (partial into []))\r\n               (into [])))\r\n; \u5148\u884c\u8a08\u7b97\u80cc\u666f\u6578\u5b57\r\n(def cells (->>\r\n                (for [y (range h) x (range w)]\r\n                  (let [isMine (-> (get-in mine [y x]) (= 1))\r\n                        borders (map \r\n                                  (partial map + [y x]) \r\n                                  [[-1 -1] [0 -1] [1 -1]\r\n                                   [-1 0] [1 0]\r\n                                   [-1 1] [0 1] [1 1]])\r\n                        lazyBorderMineCnt (->>\r\n                                               (map (partial get-in mine) borders)\r\n                                               (filter (partial = 1)))]\r\n                    (if isMine\r\n                      9\r\n                      (count lazyBorderMineCnt))))\r\n                (partition w)\r\n                (map (partial into []))\r\n                (into [])))\r\n; \u63d2\u65d7\u5b50\r\n(defn flag [[r c :as rc] ctx]\r\n  (let [s (get-in ctx [:states r c])]\r\n    (condp = s\r\n      :close\r\n      (update-in ctx [:states r c] (constantly :flag))\r\n      \r\n      :flag\r\n      (update-in ctx [:states r c] (constantly :close))\r\n      \r\n      ctx)))\r\n; \u7ffb\u724c\r\n(defn flip [[r c :as rc] ctx]\r\n  (let [v (get-in ctx [:cells r c])\r\n        s (get-in ctx [:states r c])]\r\n    (if (= :open s)\r\n      ctx\r\n      (cond\r\n        ; \u505c\u6b62\u689d\u4ef6\r\n        (nil? v)\r\n        ctx\r\n        \r\n        ; \u5730\u96f7\u3002\u7d50\u675f\u904a\u6232\r\n        (= 9 v)\r\n        (-> ctx\r\n            (update-in [:states r c] (constantly :open))\r\n            (update-in [:gameState] (constantly :died)))\r\n        \r\n        ; \u5468\u570d\u6c92\u6709\u4efb\u4f55\u5730\u96f7\u3002\u7ffb\u958b\u81f3\u6709\u5730\u96f7\u70ba\u6b62\r\n        (= 0 v)\r\n        (reduce\r\n          (fn [ctx [r c :as offset]]\r\n            (flip (map + offset rc) ctx))\r\n          (update-in ctx [:states r c] (constantly :open))\r\n          ; \u56db\u500b\u65b9\u5411\r\n          [[0 -1] [1 0] [0 1] [-1 0]])\r\n        \r\n        ; \u5176\u5b83\u60c5\u6cc1\u5c31\u55ae\u7d14\u628a\u724c\u6253\u958b\r\n        :else\r\n        (update-in ctx [:states r c] (constantly :open))))))\r\n\r\n; ====\r\n; VIEW\r\n; ====\r\n\r\n; \u756b\u80cc\u666f\u6578\u5b57\u548c\u5730\u96f7\r\n(defn drawOpen [p5 v x y w h]\r\n  (condp = v\r\n    9\r\n    (let [size h]\r\n      (.fill p5 0)\r\n      (.circle p5 (+ x (/ w 2)) (+ y (/ h 2)) (/ (min w h) 2)))\r\n    \r\n    (let [[r g b] (condp = (int (/ v 3))\r\n                    0 [0 255 0]\r\n                    1 [0 255 255]\r\n                    2 [255 0 0])]\r\n      (.textSize p5 h)\r\n      (.fill p5 r g b)\r\n      (.text p5 v (+ x (/ (.textWidth p5 v) 2)) (+ h y)))))\r\n; \u756b\u65d7\u5b50\r\n(defn drawFlag [p5 x y w h]\r\n  (.triangle p5 (+ x (/ w 2)) y x (+ y h) (+ x w) (+ y h)))\r\n\r\n(defn main []\r\n  (def model nil)\r\n  (def evt (a/chan))\r\n  \r\n  (am/go-loop [ctx {:cells cells\r\n                    :states (->> :close\r\n                                 (repeat (* w h))\r\n                                 (partition w)\r\n                                 (map (partial into []))\r\n                                 (into []))\r\n                    :gameState :play}]\r\n    (set! model ctx)\r\n    (let [e (a/<! evt)]\r\n      (condp = (:type e)\r\n        :mouseReleased\r\n        (let [btn (get-in e [:info :btn])\r\n              rc (get-in e [:info :rc])]\r\n          (condp = btn\r\n            ; \u5de6\u9375\u3002\u7ffb\u724c\r\n            :left\r\n            (recur (flip rc ctx))\r\n            \r\n            ; \u53f3\u9375\u3002\u63d2\u65d7\u5b50\r\n            :right\r\n            (recur (flag rc ctx))\r\n            \r\n            (recur ctx)))\r\n        \r\n        (recur ctx))))\r\n  \r\n  (set! (.-setup p5)\r\n    (fn []\r\n      (.noStroke p5)\r\n      (let [canvas (.createCanvas p5 cw ch)]\r\n        (.parent canvas \"container\"))))\r\n  \r\n  (set! (.-draw p5)\r\n    (fn []\r\n      (.fill p5 255)\r\n      (.rect p5 0 0 cw ch)\r\n      (when model\r\n        (dorun\r\n          (for [y (range h)\r\n                x (range w)]\r\n            (let [v (get-in model [:cells y x])\r\n                  s (get-in model [:states y x])]\r\n              (cond\r\n                (or \r\n                    (= :open s)\r\n                    ; \u904a\u6232\u7d50\u675f\u5f8c\uff0c\u6c92\u6709\u63d2\u65d7\u5b50\u7684\u683c\u5b50\u82e5\u662f\u5730\u96f7\u8981\u756b\u51fa\u4f86\r\n                    (and (not (= :flag s))\r\n                         (= :died (:gameState model)) \r\n                         (= 9 v)))\r\n                (do\r\n                  (.fill p5 255)\r\n                  (.rect p5 (* x gw) (* y gh) gw gh)\r\n                  (drawOpen p5 v (* x gw) (* y gh) gw gh))\r\n                \r\n                (= :close s)\r\n                (do\r\n                  (.fill p5 122 61 122)\r\n                  (.rect p5 (* x gw) (* y gh) gw gh))\r\n                \r\n                (= :flag s)\r\n                (do\r\n                  (.fill p5 122 61 122)\r\n                  (.rect p5 (* x gw) (* y gh) gw gh)\r\n                  (.fill p5 255 0 0)\r\n                  (drawFlag p5 (* x gw) (* y gh) gw gh))\r\n                \r\n                :else\r\n                nil))))\r\n        (when (= :died (:gameState model))\r\n          (.fill p5 0 0 255)\r\n          (.textSize p5 50)\r\n          (.text p5 \"Game Over\" (- (/ cw 2) (/ (.textWidth p5 \"Game Over\") 2)) (/ ch 2))))))\r\n  \r\n  ; =====\r\n  ; EVENT\r\n  ; =====\r\n  \r\n  (set! (.-mouseReleased p5)\r\n    (fn []\r\n      (am/go\r\n        ; \u6309\u4e0b\u9375\u5f8c\u7d44\u6210\u884c\u5217\u8cc7\u6599\r\n        (let [mx (.-mouseX p5)\r\n              my (.-mouseY p5)\r\n              btn (.-mouseButton p5)\r\n              c (int (/ mx gw))\r\n              r (int (/ my gh))]\r\n          (a/>! evt {:type :mouseReleased :info {:rc [r c] :btn (keyword btn)}}))))))\r\n\r\n(main)\r\n                      \r\n                      \r\n             \r\n"]}