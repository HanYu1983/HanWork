{"version":3,"sources":["app/t7/main.cljs"],"mappings":"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","names":["app.t7.main/model","cljs.core.atom.cljs$core$IFn$_invoke$arity$1","app.t7.tool/checkProperty","self","app.t7.main/move","offset","cljs.core.update_in.cljs$core$IFn$_invoke$arity$3","cljs.core.partial.cljs$core$IFn$_invoke$arity$3","cljs.core/map","cljs.core/+","p__38349","map__38350","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","app.t7.main/gravity","g","p__38352","map__38353","app.t7.main/velocity","v","p__38355","map__38356","app.t7.main/insideView","pos","vec__38360","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","x","_","app.t7.main/step","m","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic","cljs.core.map.cljs$core$IFn$_invoke$arity$2","cljs.core.comp.cljs$core$IFn$_invoke$arity$3","app.t7.platform/collideWall","cljs.core.filter.cljs$core$IFn$_invoke$arity$2","p__38400","map__38401","vec__38402","vec__38405","app.t7.main/drawBox","p","y","w","h","p__38414","map__38415","vec__38417","app.t7.main/drawCircle","radian","app.t7.main/sketch","cljs.core/deref","entity","draws","p1__38430#","cljs.core.partial.cljs$core$IFn$_invoke$arity$2","cljs.core.reduce.cljs$core$IFn$_invoke$arity$2","cljs.core/comp","app.t7.platform/draw","seq__38442","cljs.core/seq","chunk__38443","count__38444","i__38445","temp__5735__auto__","cljs.core/chunked-seq?","c__4550__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","cljs.core/first","cljs.core/next","e","app.t7.main/main","timer","js/rxjs","js/rxjs.operators","cljs.core/constantly","click","js/document","evt","p__38502","vec__38503","args","pred__38506","expr__38507","G__38513","G__38514","G__38589","G__38590","G__38595","G__38596","js/Error","cljs.core/=","key","pred__38519","expr__38520","players","newPlayers","cljs.core/replace","cljs.core/zipmap","bullets","p__38556","map__38557","cljs.core/concat","p__38568","map__38573","cljs.core/reset!","js/p5"],"sourcesContent":["(ns app.t7.main\r\n  (:require [app.t7.platform :as p]\r\n            [app.t7.tool])\r\n  (:require-macros [app.t7.macro :as m]))\r\n\r\n(def model (atom nil))\r\n\r\n(m/defnx move [:position] [offset self]\r\n  (update-in self [:position] (partial map + offset)))\r\n\r\n(m/defnx gravity [:position :gravity] [{g :gravity :as self}]\r\n  (update-in self [:position] (partial map + g)))\r\n\r\n(m/defnx velocity [:position :velocity] [{v :velocity :as self}]\r\n  (update-in self [:position] (partial map + v)))\r\n\r\n(defn insideView [{pos :position}]\r\n  (if (nil? pos)\r\n    true\r\n    (let [[x _] pos]\r\n      (< x 250))))\r\n\r\n(defn step [m]\r\n  (merge m \r\n    {:entity (->> (map (comp p/collideWall gravity velocity) (:entity m))\r\n                  (filter insideView))}))\r\n\r\n(m/defnx drawBox [:position :size] [p {[x y] :position [w h] :size :as self}]\r\n  (.fill p 255 0 0)\r\n  (.rect p x y w h))\r\n\r\n(m/defnx drawCircle [:position :radian] [p {[x y] :position radian :radian :as self}]\r\n  (.fill p 0 255 0)\r\n  (.circle p x y radian))\r\n\r\n(defn sketch [p]\r\n  (set! (.-setup p)\r\n    (fn []\r\n      (.createCanvas p 250 150)))\r\n  \r\n  (set! (.-draw p)\r\n    (fn []\r\n      (let [m @model\r\n            entity (:entity m)\r\n            draws (->> [drawBox drawCircle]\r\n                       (map #(partial % p))\r\n                       (reduce comp))]\r\n        (.background p 0)\r\n        (p/draw p)\r\n        (doseq [e entity] \r\n          (draws e))))))\r\n\r\n(defn main []\r\n  (let [timer (-> (.timer js/rxjs 0 100)\r\n                  (.pipe\r\n                    (.map js/rxjs.operators (constantly [:update]))))\r\n        click (-> (.fromEvent js/rxjs js/document \"keydown\")\r\n                  (.pipe\r\n                    (.map js/rxjs.operators (fn [e] [:keydown, e.key]))))\r\n        evt (-> (.merge js/rxjs \r\n                  timer\r\n                  click)\r\n                (.pipe\r\n                  (.scan js/rxjs.operators\r\n                    (fn [m [evt args]]\r\n                      (condp = evt\r\n                        :keydown\r\n                        (let [key args]\r\n                          (condp = key\r\n                            \"a\"\r\n                            (let [players (filter :player (:entity m))\r\n                                  newPlayers (map (partial move [-3 0]) players)]\r\n                              (update-in m [:entity] (partial replace (zipmap players newPlayers))))\r\n                            \r\n                            \"d\"\r\n                            (let [players (filter :player (:entity m))\r\n                                  newPlayers (map (partial move [3 0]) players)]\r\n                              (update-in m [:entity] (partial replace (zipmap players newPlayers))))\r\n                            \r\n                            \"w\"\r\n                            (let [players (filter :player (:entity m))\r\n                                  newPlayers (map (partial move [0 -20]) players)]\r\n                              (update-in m [:entity] (partial replace (zipmap players newPlayers))))\r\n                            \r\n                            \" \"\r\n                            (let [players (filter :player (:entity m))\r\n                                  bullets (map (fn [{pos :position}] {:position pos :radian 3 :velocity [10 0]}) players)]\r\n                              (update-in m [:entity] (partial concat bullets)))\r\n                            \r\n                            \"s\"\r\n                            (let [players (filter :player (:entity m))\r\n                                  bullets (map (fn [{pos :position}] {:position pos :size [5 5] :velocity [10 0]}) players)]\r\n                              (update-in m [:entity] (partial concat bullets)))\r\n                            \r\n                            m))\r\n                        :update (step m)\r\n                        :default m))\r\n                    {:entity [{:position [50 0] :size [30 30] :gravity [0 5] :player true} {:position [100 0] :size [30 30] :gravity [0 5] :player true}]})))]\r\n\r\n    (.subscribe evt\r\n      (fn [m]\r\n        (reset! model m))))\r\n  \r\n  (js/p5. sketch \"container\"))\r\n\r\n(main)\r\n"]}