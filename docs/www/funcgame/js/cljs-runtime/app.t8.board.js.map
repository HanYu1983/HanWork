{"version":3,"sources":["app/t8/board.cljs"],"mappings":"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","names":["app.t8.board/board","cljs.core.repeat.cljs$core$IFn$_invoke$arity$2","cljs.core.into.cljs$core$IFn$_invoke$arity$2","app.t8.board/lines","hs","iter__4523__auto__","s__39098","cljs.core/LazySeq","temp__5735__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__4521__auto__","size__4522__auto__","cljs.core/count","b__39100","cljs.core/chunk-buffer","i__39099","cljs.core._nth.cljs$core$IFn$_invoke$arity$2","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__39097","cljs.core/chunk-rest","cljs.core/first","cljs.core/cons","cljs.core/rest","x","cljs.core.range.cljs$core$IFn$_invoke$arity$1","vs","s__39102","b__39104","i__39103","iter__39101","y","x1","s__39106","xs__6292__auto__","iterys__4519__auto__","s__39108","b__39110","i__39109","iter__39107","fs__4520__auto__","cljs.core.concat.cljs$core$IFn$_invoke$arity$2","iter__39105","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","x2","s__39112","s__39114","b__39116","i__39115","iter__39113","iter__39111","cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic","app.t8.board/checkWin","board","player","cljs.core.map.cljs$core$IFn$_invoke$arity$2","line","cljs.core/every?","cljs.core.partial.cljs$core$IFn$_invoke$arity$2","cljs.core/=","pos","cljs.core.get_in.cljs$core$IFn$_invoke$arity$2","cljs.core/some","cljs.core/true?","app.t8.board/possibleActions","s__39118","s__39120","b__39122","i__39121","iter__39119","iter__39117","cljs.core/chunk-first"],"sourcesContent":["(ns app.t8.board)\r\n\r\n(def board (->>\r\n            (repeat 3 nil)\r\n            (into [])\r\n            (repeat 3)\r\n            (into [])))\r\n\r\n(def lines\r\n  (let [hs (for [x (range 3)] [[0 x] [1 x] [2 x]])\r\n        vs (for [y (range 3)] [[y 0] [y 1] [y 2]])\r\n        x1  (for [x (range 3) y (range 3) :when (= x y)] [y x])\r\n        x2 (for [x (range 3) y (range 3) :when (= 2 (+ x y))] [y x])]\r\n    (concat hs vs [x1] [x2])))\r\n\r\n(defn checkWin [board player]\r\n  (->> lines\r\n       (map (fn [line]\r\n              (every?\r\n               (partial = player)\r\n               (map (fn [pos]\r\n                      (get-in board pos))\r\n                    line))))\r\n       (some true?)))\r\n\r\n(defn possibleActions [board]\r\n  (for [x (range 3) y (range 3) :when (->> (get-in board [y x]) nil?)]\r\n    [y x]))\r\n"]}