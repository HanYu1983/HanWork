{"version":3,"sources":["app3/system/bulletSys.cljs"],"mappings":"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","names":["model","event","pred__36188","cljs.core/=","expr__36189","cljs.core/first","G__36191","G__36192","vec__36193","cljs.core/rest","app3.system.bulletSys/checkBulletHitPlayer","cljs.core.filter.cljs$core$IFn$_invoke$arity$2","cljs.core.partial.cljs$core$IFn$_invoke$arity$2","app3.tool/checkProperty","players","enemies","bullets","collides","iter__4523__auto__","s__36209","cljs.core/LazySeq","temp__5735__auto__","cljs.core/seq","xs__6292__auto__","iterys__4519__auto__","s__36211","cljs.core/chunked-seq?","c__4521__auto__","size__4522__auto__","cljs.core/count","b__36213","cljs.core/chunk-buffer","i__36212","cljs.core._nth.cljs$core$IFn$_invoke$arity$2","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__36210","cljs.core/chunk-rest","cljs.core/cons","fs__4520__auto__","cljs.core.concat.cljs$core$IFn$_invoke$arity$2","iter__36208","o1","o2","fromPlyrId","cljs.core.get_in.cljs$core$IFn$_invoke$arity$2","toId","shouldIgnore","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","app3.tool/checkCollide","p__36204","vec__36205","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","_","isCollide","cljs.core.map.cljs$core$IFn$_invoke$arity$2","hitPlyrs","hitBullets","cljs.core/second","plyrGroup","cljs.core/group-by","cljs.core/identity","plyrs","cljs.core/keys","hitCounts","cljs.core/vals","fexpr__36232","cljs.core.update.cljs$core$IFn$_invoke$arity$3","origin","cljs.core.replace.cljs$core$IFn$_invoke$arity$2","cljs.core/zipmap","cljs.core.repeat.cljs$core$IFn$_invoke$arity$1","cljs.core.map.cljs$core$IFn$_invoke$arity$3","e","hitCnt","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","x__4219__auto__","y__4220__auto__","cljs.core.comp.cljs$core$IFn$_invoke$arity$2","cljs.core/not","cljs.core/nil?","app3.emitter/send","pred__36233","expr__36234","G__36236","G__36237","vec__36238","app3.system.bulletSys/removeBullet","outBullets","p__36241","map__36242","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","vec__36243","cljs.core.get.cljs$core$IFn$_invoke$arity$2","x","y","maxFlyLength","bullet","fly","cljs.core/-","app3.tool/length","cljs.core/chunk-first"],"sourcesContent":["(ns app3.system.bulletSys\n  (:require-macros [app3.macros :as m])\n  (:require [app3.emitter :refer [send]]))\n\n(m/defsys checkBulletHitPlayer\n  :update []\n  (m/lete [players [:player]\n           enemies [:enemy]\n           bullets [:bullet]]\n          (let [collides (->>\n                          (for [o1 (concat players enemies)\n                                o2 bullets]\n                            [[o1 o2] (let [fromPlyrId (get-in o2 [:from :id])\n                                           toId (:id o1)\n                                           shouldIgnore (= fromPlyrId toId)]\n                                       (if shouldIgnore\n                                         false\n                                         (app3.tool/checkCollide (:position o1) (:position o2) 30)))])\n                          (filter (fn [[_ isCollide]] isCollide))\n                          (map first))]\n            (if (> (count collides) 0)\n              (let [hitPlyrs (map first collides)\n                    hitBullets (map second collides)\n                    plyrGroup (group-by identity hitPlyrs)\n                    plyrs (keys plyrGroup)\n                    hitCounts (map count (vals plyrGroup))]\n                (->> model\n                     ((fn [model]\n                        (update model :entities (fn [origin]\n                                                  (->> origin\n                                                       (replace (zipmap hitBullets (repeat nil)))\n                                                       (replace (zipmap plyrs (map\n                                                                               (fn [e hitCnt]\n                                                                                 (-> e\n                                                                                     (assoc :hp (-> (:hp e)\n                                                                                                    (- (* 10 hitCnt))\n                                                                                                    (max 0)))))\n                                                                               plyrs\n                                                                               hitCounts)))\n                                                       (filter (comp not nil?)))))))\n                     (send [:bulletCollidePlayer collides])))\n              model))))\n\n(m/defsys removeBullet\n  :update []\n  (m/lete [bullets [:bullet]]\n          (let [outBullets (filter\n                            (fn [{[x y] :position maxFlyLength :flyLength :as bullet}]\n                              (let [fly (-> (map - [x y] (get-in bullet [:from :position]))\n                                            (app3.tool/length))]\n                                (or (> fly maxFlyLength)\n                                    (< x 0)\n                                    (> x 600)\n                                    (< y 0)\n                                    (> y 600))))\n                            bullets)]\n            (if (> (count outBullets) 0)\n              (do (send [:bulletHitWall outBullets] nil)\n                  (update model :entities (fn [origin]\n                                            (->> origin\n                                                 (replace (zipmap outBullets (repeat nil)))\n                                                 (filter (comp not nil?))))))\n              model))))\n"]}