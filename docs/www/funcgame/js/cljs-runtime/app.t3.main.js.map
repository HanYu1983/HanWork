{"version":3,"sources":["app/t3/main.cljs"],"mappings":"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","names":["app.t3.main/cw","app.t3.main/ch","app.t3.main/spd","app.t3.main/bltspd","app.t3.main/thrustSpd","app.t3.main/p5","js/window","app.t3.main/updatePlayerInput","ctx","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","key","cljs.core/contains?","pred__37025","expr__37026","cljs.core/=","cljs.core.update_in.cljs$core$IFn$_invoke$arity$3","cljs.core.partial.cljs$core$IFn$_invoke$arity$3","cljs.core/map","cljs.core/+","p1__37019#","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","cljs.core.get_in.cljs$core$IFn$_invoke$arity$2","app.t3.main/updatePlayerThrust","app.t3.main/updateKey","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic","clojure.set.difference.cljs$core$IFn$_invoke$arity$2","app.t3.main/updateCamera","app.t3.main/updateVelocity","entity","cljs.core/every?","cljs.core.partial.cljs$core$IFn$_invoke$arity$2","app.t3.main/updateEntities","cljs.core.map.cljs$core$IFn$_invoke$arity$2","app.t3.main/removeEntityIfOutOfBound","vec__37047","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","cx","_","entities","cljs.core.filter.cljs$core$IFn$_invoke$arity$2","p__37050","map__37052","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","vec__37053","cljs.core.get.cljs$core$IFn$_invoke$arity$2","x","app.t3.main/spawnEnemy","vec__37069","spawnPos","c","rcs","iter__4523__auto__","s__37073","cljs.core/LazySeq","temp__5735__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__4521__auto__","size__4522__auto__","cljs.core/count","b__37075","cljs.core/chunk-buffer","i__37074","cljs.core._nth.cljs$core$IFn$_invoke$arity$2","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__37072","cljs.core/chunk-rest","cljs.core/first","cljs.core/cons","cljs.core/rest","r","cljs.core.range.cljs$core$IFn$_invoke$arity$1","spawnRcs","p1__37060#","cljs.core.nth.cljs$core$IFn$_invoke$arity$2","spawnRcsOnce","cljs.core/set","spawnEnemies","p__37279","vec__37281","clojure.set.union.cljs$core$IFn$_invoke$arity$2","cljs.core.concat.cljs$core$IFn$_invoke$arity$2","app.t3.main/checkCollide","playerBullets","p1__37290#","enemies","p1__37291#","check","s__37294","xs__6292__auto__","iterys__4519__auto__","s__37296","b__37298","i__37297","iter__37295","fs__4520__auto__","iter__37293","b","e","vec__37302","vec__37305","vec__37310","vec__37313","bx","by","ex","ey","collide","p__37320","vec__37322","isCollide","removeEnemies","p1__37292#","cljs.core/not","cljs.core/some","cljs.core/second","app.t3.main/step","p__37329","map__37331","app.t3.main/projection","view","camera","pos","cljs.core.map.cljs$core$IFn$_invoke$arity$3","cljs.core/-","app.t3.main/main","app.t3.main/model","app.t3.main/evt","cljs.core.async.chan.cljs$core$IFn$_invoke$arity$0","js/setInterval","c__30812__auto__","cljs.core.async.chan.cljs$core$IFn$_invoke$arity$1","cljs.core.async.impl.dispatch/run","f__30813__auto__","switch__30584__auto__","state_37347","state_val_37348","inst_37340","inst_37341","inst_37343","cljs.core/PersistentHashMap","cljs.core.async.impl.ioc-helpers/put!","inst_37345","cljs.core.async.impl.ioc-helpers/return-chan","statearr-37352","state-machine__30585__auto__","ret-value__30586__auto__","result__30587__auto__","cljs.core/keyword-identical?","e37354","js/Object","ex__30588__auto__","statearr-37356","cljs.core.async.impl.ioc-helpers/process-exception","state__30814__auto__","statearr-37359","cljs.core.async.impl.ioc-helpers/USER-START-IDX","cljs.core.async.impl.ioc-helpers/run-state-machine-wrapped","state_37446","state_val_37447","inst_37442","statearr-37450","inst_37361","inst_37362","inst_37363","cljs.core/PersistentVector","inst_37364","inst_37365","inst_37366","inst_37367","inst_37368","cljs.core/PersistentHashSet","inst_37369","inst_37371","inst_37372","inst_37374","inst_37375","inst_37376","inst_37377","inst_37378","inst_37379","inst_37380","inst_37381","inst_37382","inst_37383","inst_37384","inst_37385","inst_37386","inst_37387","inst_37388","inst_37389","inst_37390","inst_37391","inst_37392","inst_37393","statearr-37454","statearr-37455","inst_37406","inst_37410","inst_37411","statearr-37457","statearr-37458","statearr-37459","inst_37435","statearr-37460","inst_37420","statearr-37461","statearr-37462","inst_37444","inst_37428","inst_37429","inst_37430","inst_37431","inst_37432","statearr-37463","statearr-37464","inst_37404","statearr-37465","cljs.core.async.impl.ioc-helpers/take!","inst_37425","inst_37426","statearr-37466","statearr-37473","inst_37437","statearr-37476","statearr-37477","inst_37413","inst_37414","inst_37415","inst_37416","inst_37417","statearr-37478","statearr-37480","inst_37440","statearr-37481","inst_37422","inst_37423","statearr-37484","statearr-37485","statearr-37487","e37495","statearr-37496","statearr-37499","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","cljs.core.update_in.cljs$core$IFn$_invoke$arity$4","cljs.core/conj","js/console","cljs.core.async/close!","projectionFn","canvas","vec__37501","px","py","G__37504","G__37505","cljs.core.dorun.cljs$core$IFn$_invoke$arity$1","seq__37508","chunk__37509","count__37510","i__37511","c__4550__auto__","cljs.core/chunk-first","cljs.core/next","vec__37554","vec__37559","G__37557","G__37558","G__37562","G__37563","state_37571","state_val_37572","inst_37564","inst_37565","inst_37566","inst_37567","inst_37569","statearr-37573","e37580","statearr-37581","statearr-37582","state_37595","state_val_37596","inst_37587","inst_37589","inst_37590","inst_37591","inst_37593","statearr-37603","e37604","statearr-37605","statearr-37606"],"sourcesContent":["(ns app.t3.main\r\n  (:require-macros\r\n    [cljs.core.async.macros :as am])\r\n  (:require [cljs.core.async :as a]\r\n            [clojure.set :as s]))\r\n\r\n(def cw 600)\r\n(def ch 400)\r\n(def spd (/ ch 50))\r\n(def bltspd (/ ch 25))\r\n(def thrustSpd 1)\r\n(def p5 js/window)\r\n\r\n; \u8655\u7406\u4f7f\u7528\u8005\u8f38\u5165\r\n(defn updatePlayerInput [ctx]\r\n  (reduce\r\n    (fn [ctx key]\r\n      (if-not (contains? (:keyPressed ctx) key)\r\n        ctx\r\n        (condp = key\r\n          \"w\"\r\n          (update-in ctx [:player :pos] (partial map + [0 (- spd)]))\r\n\r\n          \"s\"\r\n          (update-in ctx [:player :pos] (partial map + [0 spd]))\r\n          \r\n          \"a\"\r\n          (update-in ctx [:player :pos] (partial map + [(- spd) 0]))\r\n          \r\n          \"d\"\r\n          (update-in ctx [:player :pos] (partial map + [spd 0]))\r\n          \r\n          \"j\"\r\n          ; \u767c\u5c04\u5b50\u5f48\r\n          (update-in ctx [:entities] #(conj % {:flag #{:playerBullet} \r\n                                               :pos (get-in ctx [:player :pos]) \r\n                                               :velocity [bltspd 0]}))\r\n          \r\n          ctx)))\r\n    ctx\r\n    [\"w\" \"a\" \"s\" \"d\" \"j\"]))\r\n\r\n; \u81ea\u6a5f\u81ea\u52d5\u5674\u5c04\u4f4d\u79fb\r\n(defn updatePlayerThrust [ctx]\r\n  (update-in ctx [:player :pos] (partial map + [thrustSpd 0])))\r\n\r\n; \u66f4\u65b0\u6309\u9375\u72c0\u614b\r\n(defn updateKey [ctx]\r\n  (merge ctx {:keyPressed (s/difference (:keyPressed ctx) (:keyReleased ctx))\r\n              :keyReleased #{}}))\r\n\r\n; \u66f4\u65b0\u651d\u5f71\u6a5f\u4f4d\u7f6e\r\n; \u901f\u7387\u8207\u81ea\u6a5f\u5674\u5c04\u540c\r\n(defn updateCamera [ctx]\r\n  (update-in ctx [:camera :pos] (partial map + [thrustSpd 0])))\r\n\r\n; \u82e5\u6709pos\u8207velocity\uff0c\u66f4\u65b0pos\r\n(defn updateVelocity [entity]\r\n  (if-not (every? (partial contains? entity) [:pos :velocity])\r\n    entity\r\n    (update-in entity [:pos] (partial map + (:velocity entity)))))\r\n\r\n; \u66f4\u65b0\u5be6\u9ad4\r\n(defn updateEntities [ctx]\r\n  (merge ctx {:entities (map updateVelocity (:entities ctx))}))\r\n\r\n; \u79fb\u9664\u87a2\u5e55\u7bc4\u570d\u5916\u7684\u5be6\u9ad4\r\n(defn removeEntityIfOutOfBound [ctx]\r\n  (let [[cx _] (get-in ctx [:camera :pos])\r\n        entities (:entities ctx)]\r\n    (merge ctx {:entities (filter \r\n                            (fn [{[x _] :pos :as entity}]\r\n                              (and (< x (+ cx cw))\r\n                                   (> x (- cx cw))))\r\n                            entities)})))\r\n\r\n; \u751f\u6210\u6575\u6a5f\r\n(defn spawnEnemy [ctx]\r\n  (let [; \u5b9a\u7fa9\u6210\u751f\u4f4d\u7f6e\u3002\u5206\u62105\u500b\u5217\uff0c\u6bcf\u500b\u6578\u503c\u9593\u969430\u50cf\u7d20\r\n        spawnPos [[1 1 1 1 0 0 0 0 0 0 0 0]\r\n                  [0 0 0 0 1 1 1 1 0 0 0 0]\r\n                  [0 0 0 0 0 0 0 0 1 1 1 1]\r\n                  [0 0 0 0 1 1 1 1 0 0 0 0]\r\n                  [1 1 1 1 0 0 0 0 0 0 0 0]]\r\n        ; \u7528\u651d\u76f8\u6a5f\u5ea7\u6a19\u5224\u65b7\r\n        [cx _] (get-in ctx [:camera :pos])\r\n        c (int (/ cx 30))\r\n        ; \u53d6\u5f97\u5c0d\u6620\u884c\u5217\u7684\u503c\r\n        rcs (for [r (range 5)] [r c (get-in spawnPos [r c])])\r\n        ; \u5927\u65bc0\u7684\u503c\u4ee3\u8868\u8981\u751f\u6210\r\n        spawnRcs (filter #(< 0 (nth % 2)) rcs)\r\n        ; \u548c\u751f\u6210\u904e\u7684\u6bd4\u5c0d\uff0c\u53ea\u751f\u6210\u4e00\u6b21\r\n        spawnRcsOnce (s/difference (set spawnRcs) (:mark ctx))\r\n        ; \u751f\u6210\r\n        spawnEnemies (map \r\n                       (fn [[r c]] \r\n                         {:flag #{:enemy}\r\n                          :pos [(+ cx cw) (- (* (inc r) (/ ch 6)) (/ ch 2))] \r\n                          :velocity [-1 0]})\r\n                       spawnRcsOnce)]\r\n    ; \u5957\u7528\r\n    (merge ctx {; \u6210\u751f\u904e\u7684\u8a18\u9304\u8d77\u4f86\uff0c\u4e0b\u6b21\u4e0d\u518d\u751f\u6210\r\n                :mark (s/union (:mark ctx) (set spawnRcs))\r\n                :entities (concat (:entities ctx) spawnEnemies)})))\r\n\r\n; \u5224\u65b7\u78b0\u649e\r\n(defn checkCollide [ctx]\r\n  (let [; \u81ea\u6a5f\u5b50\u5f48\r\n        playerBullets (filter #(contains? (:flag %) :playerBullet) (:entities ctx))\r\n        ; \u6575\u6a5f\r\n        enemies (filter #(contains? (:flag %) :enemy) (:entities ctx))\r\n        ; \u78b0\u649e\u5075\u6e2c\r\n        check (for [b playerBullets\r\n                    e enemies]\r\n                 (let [[bx by] (:pos b)\r\n                       [ex ey] (:pos e)]\r\n                   [b e (.collidePointRect p5 ex ey bx by 30 30)]))\r\n        ; \u53d6\u5f97\u78b0\u649e\u5c0d\u8c61\r\n        collide (filter (fn [[_ _ isCollide]] isCollide) check)\r\n        ; \u79fb\u9664\u5c0d\u8c61\r\n        removeEnemies (filter #(not (some (partial = %) (map second collide))) (:entities ctx))]\r\n    ; \u5957\u7528\r\n    (merge ctx {:entities removeEnemies})))\r\n\r\n(defn step [ctx]\r\n  (-> ctx \r\n      updatePlayerInput\r\n      updatePlayerThrust\r\n      updateEntities\r\n      removeEntityIfOutOfBound\r\n      checkCollide\r\n      spawnEnemy\r\n      updateCamera\r\n      updateKey))\r\n\r\n; \u4f9d\u651d\u76f8\u6a5f\u6295\u5f71\r\n(defn projection [{view :view} camera pos]\r\n  (->>\r\n       (map - pos camera)\r\n       (map + view)))\r\n\r\n(defn main []\r\n  (def model nil)\r\n  (def evt (a/chan))\r\n  \r\n  (js/setInterval\r\n      (fn []\r\n        (am/go\r\n          (a/>! evt {:type :update})))\r\n      33)\r\n  \r\n  (am/go-loop [ctx {:player {:pos [0 0]}\r\n                    :keyPressed #{}\r\n                    :keyReleased #{}\r\n                    :camera {:pos [0 0]}\r\n                    :entities [{:pos [100 0] :velocity [0 -1]}]\r\n                    :mark #{}}]\r\n    (set! model ctx)\r\n    (let [e (a/<! evt)]\r\n      (condp = (:type e)\r\n        :keyPressed\r\n        (recur (update-in ctx [:keyPressed] conj (:key e)))\r\n        \r\n        :keyReleased\r\n        (if (= (:key e) \"q\")\r\n          (do \r\n            (.log js/console \"exit\")\r\n            (a/close! evt))\r\n          (recur (update-in ctx [:keyReleased] conj (:key e))))\r\n        \r\n        (recur (step ctx)))))\r\n  \r\n  (let [projectionFn (partial projection {:view [50 (int (/ ch 2))]})]\r\n    (set! (.-setup p5)\r\n      (fn []\r\n        (let [canvas (.createCanvas p5 cw ch)]\r\n          (.parent canvas \"container\"))))\r\n    \r\n    (set! (.-draw p5)\r\n      (fn []\r\n        (when model\r\n          (let [[px py] (->> (get-in model [:player :pos]) (projectionFn (get-in model [:camera :pos])))]\r\n            (.fill p5 255)\r\n            (.rect p5 0 0 cw ch)\r\n            (.push p5)\r\n            (.translate p5 px py)\r\n            (.rotate p5 0)\r\n            (.fill p5 100)\r\n            (.rect p5 -5 -5 10 10)\r\n            (.pop p5))\r\n          (dorun\r\n            (doseq [entity (:entities model)]\r\n              (let [[px py] (->> (get-in entity [:pos]) (projectionFn (get-in model [:camera :pos])))]\r\n                (.rect p5 px py 10 10)))))))\r\n    \r\n    (set! (.-keyPressed p5)\r\n      (fn []\r\n        (am/go\r\n          (a/>! evt {:type :keyPressed :key (.-key p5)}))))\r\n    \r\n    (set! (.-keyReleased p5)\r\n      (fn []\r\n        (am/go\r\n          (a/>! evt {:type :keyReleased :key (.-key p5)}))))))\r\n\r\n(main)\r\n"]}