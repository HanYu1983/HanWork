{"version":3,"sources":["app/t7/platform.cljs"],"mappings":"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","names":["app.t7.platform/cw","app.t7.platform/ch","app.t7.platform/data","p__37925","p__37926","vec__37927","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","vec__37930","app.t7.platform/boxCorner","x","y","w","h","p__37941","map__37942","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","vec__37943","cljs.core.get.cljs$core$IFn$_invoke$arity$2","vec__37946","app.t7.tool/checkProperty","self","app.t7.platform/collideWall","pos","size","vec__37955","vec__37958","c","r","cljs.core.map.cljs$core$IFn$_invoke$arity$3","cljs.core//","cljs.core.comp.cljs$core$IFn$_invoke$arity$2","js/Math","lt","rt","rb","lb","corners","walls","iter__4523__auto__","s__37963","cljs.core/LazySeq","temp__5735__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__4521__auto__","size__4522__auto__","cljs.core/count","b__37965","cljs.core/chunk-buffer","i__37964","cljs.core._nth.cljs$core$IFn$_invoke$arity$2","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__37962","cljs.core/chunk-rest","cljs.core/first","cljs.core/cons","cljs.core/rest","cljs.core/reverse","cljs.core.get_in.cljs$core$IFn$_invoke$arity$2","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","p__37988","vec__37990","corner","wall?","cljs.core/not","pred__37994","expr__37997","cljs.core/=","cljs.core.update_in.cljs$core$IFn$_invoke$arity$3","p__38000","vec__38001","p__38004","vec__38007","p__38016","vec__38017","p__38021","vec__38028","cljs.core/vector","app.t7.platform/draw","p","cljs.core.doall.cljs$core$IFn$_invoke$arity$1","seq__38046","chunk__38051","count__38052","i__38053","seq__38054","chunk__38055","count__38056","i__38057","c__4550__auto__","cljs.core/chunk-first","cljs.core/next","seq__38047","chunk__38048","count__38049","i__38050","cljs.core.range.cljs$core$IFn$_invoke$arity$1","val","color"],"sourcesContent":["(ns app.t7.platform\n  (:require-macros [app.t7.macro :as m])\n  (:require [app.t7.tool]))\n\n(def cw 50)\n(def ch 50)\n(def data [[0 0 0 0 0]\n           [0 0 1 0 0]\n           [1 1 1 1 1]])\n\n(defn boxCorner [[x y] [w h]]\n  [[x y] [(+ x w) y] [(+ x w) (+ y h)] [x (+ y h)]])\n\n(m/defnx collideWall [:position :size] [{[x y :as pos] :position [w h :as size] :size :as self}]\n  (let [[c r] (map (comp (.-floor js/Math) /) pos [cw ch])\n        [lt rt rb lb :as corners] (boxCorner pos size)\n        walls (for [c corners] \n                 (->> (map (comp (.-floor js/Math) /) c [cw ch])\n                      reverse\n                      (get-in data)\n                      (= 1)))]\n    (reduce \n      (fn [self [corner wall?]]\n        (if (not wall?)\n          self\n          (condp = corner\n            lt\n            (update-in self [:position] \n              (fn [[x y]]\n                [(* (inc c) cw) y]))\n            \n            lb\n            (update-in self [:position] \n              (fn [[x y]]\n                [x (- (* (inc r) ch) h)]))\n            \n            rt\n            (update-in self [:position] \n              (fn [[x y]]\n                [(- (* (inc c) cw) w) y]))\n            \n            rb\n            (update-in self [:position] \n              (fn [[x y]]\n                [x (- (* (inc r) ch) h)]))\n            \n            self)))\n      self\n      (map vector corners walls))))\n\n(defn draw [p]\n  (doall\n    (doseq [y (range (count data)) \n            x (range (count (first data)))]\n      (let [val (get-in data [y x])\n            color (if (= 1 val) 100 255)]\n        (.fill p color)\n        (.rect p (* x cw) (* y ch) cw ch)))))\n"]}