{"version":3,"sources":["app/t8/qlearning.cljs"],"mappings":"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","names":["cljs.spec.alpha/def-impl","cljs.core/identity","cljs.spec.alpha/and-spec-impl","cljs.core/number?","cljs.core.comp.cljs$core$IFn$_invoke$arity$2","cljs.core/not","js/isNaN","cljs.spec.alpha.every_impl.cljs$core$IFn$_invoke$arity$4","cljs.spec.alpha.tuple_impl.cljs$core$IFn$_invoke$arity$2","G__33815","cljs.core/map?","i__11413__auto__","v__11414__auto__","cljs.core.nth.cljs$core$IFn$_invoke$arity$2","G__33816","cljs.spec.alpha/map-spec-impl","G__33817","cljs.core/contains?","app.t8.qlearning/model","cljs.spec.alpha/explain","p__33818","map__33819","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","js/Error","%","app.t8.qlearning/learn","learningRate","discountFactor","ctx","state","action","reward","newState","cljs.spec.alpha.valid_QMARK_.cljs$core$IFn$_invoke$arity$2","cljs.core.update_in.cljs$core$IFn$_invoke$arity$3","oldQ","or__4131__auto__","maxV","cljs.core.get_in.cljs$core$IFn$_invoke$arity$2","cljs.core/vals","cljs.core/max","newQ","nextQ","app.t8.qlearning/selectAction","actions","scores","p1__33821#","cljs.core.map.cljs$core$IFn$_invoke$arity$2","scoresAddMin","cljs.core/inc","cljs.core.partial.cljs$core$IFn$_invoke$arity$2","cljs.core/+","cljs.core/min","total","scoreNormalize","o","selectIdx","cljs.core/rand-int","cljs.core.map.cljs$core$IFn$_invoke$arity$3","cljs.core/vector","cljs.core.mapcat.cljs$core$IFn$_invoke$arity$variadic","p__33822","vec__33823","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","score","cljs.core.repeat.cljs$core$IFn$_invoke$arity$2","cljs.core.drop.cljs$core$IFn$_invoke$arity$2","cljs.core/first","app.t8.qlearning/bestAction","self","cljs.core.replace.cljs$core$IFn$_invoke$arity$2","p1__33826#","best","p1__33828#","p2__33827#","cljs.core.sort.cljs$core$IFn$_invoke$arity$2","cljs.core/compare","cljs.core/last","cljs.core/ffirst","app.t8.qlearning/test-it","model","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic","new-state","cljs.core.update.cljs$core$IFn$_invoke$arity$3","cljs.core/constantly","_","cljs.core.print.cljs$core$IFn$_invoke$arity$variadic"],"sourcesContent":["(ns app.t8.qlearning\r\n  (:require [clojure.spec.alpha :as s]))\r\n\r\n(s/def ::state identity)\r\n(s/def ::action identity)\r\n(s/def ::qvalue (s/and number? (comp not js/isNaN)))\r\n(s/def ::qtable (s/map-of ::state (s/map-of ::action ::qvalue)))\r\n(s/def ::model (s/keys :req-un [::qtable ::learningRate ::discountFactor]))\r\n\r\n(def model {:qtable {}\r\n            :learningRate 0.5\r\n            :discountFactor 0.9})\r\n\r\n(s/explain ::model model)\r\n\r\n(defn learn [{:keys [learningRate discountFactor] :as ctx} state action reward newState]\r\n  {:pre [(s/valid? ::model ctx) (s/valid? ::state newState)]\r\n   :post [(s/valid? ::model %)]}\r\n  (update-in ctx [:qtable state action]\r\n             (fn [oldQ]\r\n               (let [oldQ (or oldQ 0)\r\n                     maxV  (or (->> (get-in ctx [:qtable newState]) vals (apply max))\r\n                               0)\r\n                     newQ (+ reward (* discountFactor maxV))\r\n                     nextQ (+ (* (- 1 learningRate) oldQ) (* learningRate newQ))]\r\n                 nextQ))))\r\n\r\n(defn selectAction [ctx state actions]\r\n  (let [scores (map #(get-in ctx [:qtable state %]) actions)\r\n        scoresAddMin (map (comp inc (partial + (- (apply min scores)))) scores)\r\n        total (apply + scoresAddMin)\r\n        scoreNormalize (map (fn [o]\r\n                              (-> o\r\n                                  (* 100)\r\n                                  (/ total)\r\n                                  int))\r\n                            scoresAddMin)\r\n        selectIdx (rand-int (apply + scoreNormalize))\r\n        action (->> (map vector actions scoreNormalize)\r\n                    (mapcat (fn [[action score]]\r\n                              (repeat score action)))\r\n                    (drop selectIdx)\r\n                    first)]\r\n    action))\r\n\r\n\r\n(defn bestAction [self state actions]\r\n  (let [scores (replace {nil 0} (map #(get-in self [:q state %]) actions))\r\n        best (->> (map vector actions scores)\r\n                  (sort #(compare (last %2) (last %1)))\r\n                  ffirst)]\r\n    best))\r\n\r\n(defn test-it []\r\n  (let [state [0 0 0]\r\n        action 1\r\n        model (merge model {:state state\r\n                            :action action})\r\n        new-state (update state action (constantly 1))\r\n        model (learn model state action 1 new-state)\r\n        _ (print model)\r\n        state new-state\r\n        action (selectAction model state [0 2])\r\n        _ (print action)\r\n        new-state (update state action (constantly 1))\r\n        model (learn model state action -1 new-state)\r\n        _ (print model)\r\n        ]))\r\n"]}