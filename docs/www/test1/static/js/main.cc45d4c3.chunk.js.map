{"version":3,"sources":["Todo.tsx","logo.svg","App2.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["FilterType","newTodo$","Subject","editTodo$","toggleTodo$","deleteTodo$","todosList$","mergeWithKey","add","pipe","map","text","id","edit","toggle","delete","split","event","payload","event$","takeWhile","type","scan","state","action","done","collectValues","todosMap","values","shareLatest","selectedFilter$","bind","startWith","All","useCurrentFilter","currentFilter$","combineLatest","todos","currentFilter","isDone","Done","filter","todo","useTodos","todos$","TodoListFilters","value","onChange","target","next","Pending","todosList","nTotal","length","nCompleted","item","nUncompleted","percentCompleted","Math","round","useTodosStats","stats$","TodoListStats","TodoItemCreator","React","inputValue","setInputValue","onClick","TodoItem","checked","TodoList","todoList","todoItem","provider$","merge","App","source$","require","ThemeProvider","AgentBar","Avatar","Column","Title","Subtitle","Row","IconButton","RateBadIcon","RateGoodIcon","imgUrl","fill","ChatItem","MessageBox","MessageList","Dropdown","createSignal","textChange$","setText","useText","text$","TextInput","placeholder","e","useCharCount","CharacterCount","count","CharacterCounter","className","src","logo","alt","href","rel","avatar","title","subtitle","date","Date","unread","textColor","position","data","uri","status","click","loading","reply","photoURL","titleColor","messageColor","message","onReplyMessageClick","console","log","lockable","toBottomHeight","dataSource","color","buttonProps","items","icon","float","size","App2","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.cc45d4c3.chunk.js","sourcesContent":["import { Subject, combineLatest, merge } from \"rxjs\";\r\nimport { bind, shareLatest, Subscribe } from \"@react-rxjs/core\";\r\nimport { collectValues, mergeWithKey, split } from \"@react-rxjs/utils\";\r\nimport { map, takeWhile, scan, startWith } from \"rxjs/operators\";\r\nimport * as React from \"react\";\r\n\r\n// https://stackoverflow.com/questions/49218765/typescript-and-iterator-type-iterableiteratort-is-not-an-array-type\r\n\r\nconst newTodo$ = new Subject<string>();\r\nexport const onNewTodo = (text: string) => text && newTodo$.next(text);\r\n\r\nconst editTodo$ = new Subject<{ id: number; text: string }>();\r\nexport const onEditTodo = (id: number, text: string) =>\r\n  editTodo$.next({ id, text });\r\n\r\nconst toggleTodo$ = new Subject<number>();\r\nexport const onToggleTodo = (id: number) => toggleTodo$.next(id);\r\n\r\nconst deleteTodo$ = new Subject<number>();\r\nexport const onDeleteTodo = (id: number) => deleteTodo$.next(id);\r\n\r\nconst todoActions$ = mergeWithKey({\r\n  add: newTodo$.pipe(map((text, id) => ({ id: id, text }))),\r\n  edit: editTodo$,\r\n  toggle: toggleTodo$.pipe(map((id) => ({ id }))),\r\n  delete: deleteTodo$.pipe(map((id) => ({ id })))\r\n});\r\n\r\ntype Todo = { id: number; text: string; done: boolean };\r\nconst todosMap$ = todoActions$.pipe(\r\n  split(\r\n    (event) => event.payload.id,\r\n    (event$, id) =>\r\n      event$.pipe(\r\n        takeWhile((event) => event.type !== \"delete\"),\r\n        scan(\r\n          (state, action) => {\r\n            switch (action.type) {\r\n              case \"add\":\r\n              case \"edit\":\r\n                return { ...state, text: action.payload.text };\r\n              case \"toggle\":\r\n                return { ...state, done: !state.done };\r\n              default:\r\n                return state;\r\n            }\r\n          },\r\n          { id, text: \"\", done: false } as Todo\r\n        )\r\n      )\r\n  ),\r\n  collectValues()\r\n);\r\n\r\nconst todosList$ = todosMap$.pipe(\r\n  map((todosMap) => [...todosMap.values()]),\r\n  shareLatest() // We are using shareLatest because the stats will also consume it\r\n);\r\n\r\nexport enum FilterType {\r\n  All = \"all\",\r\n  Done = \"done\",\r\n  Pending = \"pending\"\r\n}\r\nconst selectedFilter$ = new Subject<FilterType>();\r\nexport const onSelectFilter = (type: FilterType) => {\r\n  selectedFilter$.next(type);\r\n};\r\nconst [useCurrentFilter, currentFilter$] = bind(\r\n  selectedFilter$.pipe(startWith(FilterType.All))\r\n);\r\n\r\nconst [useTodos, todos$] = bind(\r\n  combineLatest(todosList$, currentFilter$).pipe(\r\n    map(([todos, currentFilter]) => {\r\n      if (currentFilter === FilterType.All) {\r\n        return todos;\r\n      }\r\n\r\n      const isDone = currentFilter === FilterType.Done;\r\n      return todos.filter((todo) => todo.done === isDone);\r\n    })\r\n  )\r\n);\r\n\r\nfunction TodoListFilters() {\r\n  const filter = useCurrentFilter();\r\n\r\n  const updateFilter = ({ target }: any) => {\r\n    onSelectFilter(target.value);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      Filter:\r\n      <select value={filter} onChange={updateFilter}>\r\n        <option value={FilterType.All}>All</option>\r\n        <option value={FilterType.Done}>Completed</option>\r\n        <option value={FilterType.Pending}>Uncompleted</option>\r\n      </select>\r\n    </>\r\n  );\r\n}\r\n\r\nconst [useTodosStats, stats$] = bind(\r\n  todosList$.pipe(\r\n    map((todosList) => {\r\n      const nTotal = todosList.length;\r\n      const nCompleted = todosList.filter((item) => item.done).length;\r\n      const nUncompleted = nTotal - nCompleted;\r\n      const percentCompleted =\r\n        nTotal === 0 ? 0 : Math.round((nCompleted / nTotal) * 100);\r\n\r\n      return {\r\n        nTotal,\r\n        nCompleted,\r\n        nUncompleted,\r\n        percentCompleted\r\n      };\r\n    })\r\n  ),\r\n  { nTotal: 0, nCompleted: 0, nUncompleted: 0, percentCompleted: 0 }\r\n);\r\n\r\nfunction TodoListStats() {\r\n  const {\r\n    nTotal,\r\n    nCompleted,\r\n    nUncompleted,\r\n    percentCompleted\r\n  } = useTodosStats();\r\n\r\n  return (\r\n    <ul>\r\n      <li>Total itemsXXX: {nTotal}</li>\r\n      <li>Items completed: {nCompleted}</li>\r\n      <li>Items not completed: {nUncompleted}</li>\r\n      <li>Percent completed: {percentCompleted}</li>\r\n    </ul>\r\n  );\r\n}\r\n\r\nfunction TodoItemCreator() {\r\n  const [inputValue, setInputValue] = React.useState(\"\");\r\n\r\n  const addItem = () => {\r\n    onNewTodo(inputValue);\r\n    setInputValue(\"\");\r\n  };\r\n\r\n  const onChange = ({ target }: any) => {\r\n    setInputValue(target.value);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <input type=\"text\" value={inputValue} onChange={onChange} />\r\n      <button onClick={addItem}>Add</button>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst TodoItem: React.FC<{ item: Todo }> = ({ item }) => (\r\n  <div>\r\n    <input\r\n      type=\"text\"\r\n      value={item.text}\r\n      onChange={({ target }) => {\r\n        onEditTodo(item.id, target.value);\r\n      }}\r\n    />\r\n    <input\r\n      type=\"checkbox\"\r\n      checked={item.done}\r\n      onChange={() => {\r\n        onToggleTodo(item.id);\r\n      }}\r\n    />\r\n    <button\r\n      onClick={() => {\r\n        onDeleteTodo(item.id);\r\n      }}\r\n    >\r\n      X\r\n    </button>\r\n  </div>\r\n);\r\n\r\nfunction TodoList() {\r\n  const todoList = useTodos();\r\n\r\n  return (\r\n    <>\r\n      <TodoListStats />\r\n      <TodoListFilters />\r\n      <TodoItemCreator />\r\n\r\n      {todoList.map((todoItem) => (\r\n        <TodoItem key={todoItem.id} item={todoItem} />\r\n      ))}\r\n    </>\r\n  );\r\n}\r\n\r\nconst provider$ = merge(todos$, stats$);\r\nexport default function App() {\r\n  return (\r\n    <Subscribe source$={provider$}>\r\n      <TodoList />\r\n    </Subscribe>\r\n  );\r\n}\r\n","export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","const { ThemeProvider, AgentBar, Avatar, Column, Title, Subtitle, Row, IconButton, RateBadIcon, RateGoodIcon } = require('@livechat/ui-kit')\r\n\r\n\r\nexport default function () {\r\n    return <ThemeProvider>\r\n        <AgentBar>\r\n            <Avatar imgUrl=\"https://livechat.s3.amazonaws.com/default/avatars/male_8.jpg\" />\r\n            <Column fill>\r\n                <Title>{'Jon Snow'}</Title>\r\n                <Subtitle>{'Support hero'}</Subtitle>\r\n            </Column>\r\n            <Row>\r\n                <Column>\r\n                    <IconButton>\r\n                        <RateBadIcon />\r\n                    </IconButton>\r\n                </Column>\r\n                <Column>\r\n                    <IconButton>\r\n                        <RateGoodIcon />\r\n                    </IconButton>\r\n                </Column>\r\n            </Row>\r\n        </AgentBar>\r\n    </ThemeProvider>\r\n}\r\n","import React from 'react';\nimport logo from './logo.svg';\n//import './App.css';\n\nimport { map } from \"rxjs/operators\"\nimport { bind, Subscribe } from \"@react-rxjs/core\"\nimport { createSignal } from \"@react-rxjs/utils\"\nimport Todo from \"./Todo\"\nimport App2 from \"./App2\"\n\n// RCE CSS\nimport 'react-chat-elements/dist/main.css';\nconst { ChatItem, MessageBox, MessageList, Dropdown, Avatar } = require(\"react-chat-elements\")\n\n// A signal is an entry point to react-rxjs. It's equivalent to using a subject\nconst [textChange$, setText] = createSignal<string>();\n\nconst [useText, text$] = bind<string>(textChange$, \"\")\n\nfunction TextInput() {\n  const text = useText()\n\n  return (\n    <div>\n      <input\n        type=\"text\"\n        value={text}\n        placeholder=\"Type something...\"\n        onChange={(e) => setText(e.target.value)}\n      />\n      <br />\n      Echo: {text}\n    </div>\n  )\n}\n\nconst [useCharCount, charCount$] = bind(\n  text$.pipe(\n    map((text) => text.length)\n  )\n)\n\nfunction CharacterCount() {\n  const count = useCharCount()\n  return <>Character Count: {count}</>\n}\n\nfunction CharacterCounter() {\n  return (\n    <div>\n      <Subscribe>\n        <TextInput />\n        <CharacterCount />\n      </Subscribe>\n    </div>\n  )\n}\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <TextInput></TextInput>\n        <CharacterCounter></CharacterCounter>\n        <Todo></Todo>\n        <p>\n          Edit <code>src/App.tsx</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n        <ChatItem\n          avatar={'https://facebook.github.io/react/img/logo.svg'}\n          alt={'Reactjs'}\n          title={'Facebook'}\n          subtitle={'What are you doing?'}\n          date={new Date()}\n          unread={0} />\n        <ChatItem\n          avatar={'https://facebook.github.io/react/img/logo.svg'}\n          alt={'Reactjs'}\n          title={'Facebook'}\n          subtitle={'What are you doing?'}\n          date={new Date()}\n          unread={0} />\n        <MessageBox\n          textColor=\"red\"\n          position={'left'}\n          type={'text'}\n          text={'react.svg'}\n          data={{\n            uri: 'https://facebook.github.io/react/img/logo.svg',\n            status: {\n              click: false,\n              loading: 0,\n            }\n          }} />\n        <MessageBox\n          reply={{\n            photoURL: 'https://facebook.github.io/react/img/logo.svg',\n            title: 'elit magna',\n            titleColor: '#8717ae',\n            messageColor: '#8717ae',\n            message: 'Aliqua amet incididunt id nostrud',\n          }}\n          onReplyMessageClick={() => console.log('reply clicked!')}\n          position={'left'}\n          type={'text'}\n          textColor={'#8717ae'}\n          text={'Tempor duis do voluptate enim duis velit veniam aute ullamco dolore duis irure.'} />\n\n        <MessageList\n          className='message-list'\n          lockable={true}\n          toBottomHeight={'100%'}\n          dataSource={[\n            {\n              position: 'right',\n              type: 'text',\n              text: 'Lorem ipsum dolor sit amet, consectetur adipisicing elit',\n              date: new Date(),\n            },\n            {\n              reply: {\n                photoURL: 'https://facebook.github.io/react/img/logo.svg',\n                title: 'elit magna',\n                titleColor: '#8717ae',\n                messageColor: '#8717ae',\n                message: 'Aliqua amet incididunt id nostrud',\n              },\n              position: \"left\",\n              type: \"text\",\n              text: 'Tempor duis do voluptate enim duis velit veniam aute ullamco dolore duis irure.'\n            },\n            {\n              position: 'right',\n              type: 'text',\n              text: 'Lorem ipsum dolor sit amet, consectetur adipisicing elit',\n              date: new Date(),\n            },\n            {\n              color: 'black',\n              position: 'right',\n              type: 'text',\n              text: 'Lorem ipsum dolor sit amet, consectetur adipisicing elit',\n              date: new Date(),\n            },\n          ]} />\n\n        <Dropdown\n          buttonProps={{\n            text: 'Dropdown',\n          }}\n          items={[\n            {\n              icon: {\n                float: 'left',\n                color: 'red',\n                size: 22,\n              },\n              text: 'lorem'\n            },\n            {\n              icon: {\n                float: 'left',\n                color: 'purple',\n                size: 22,\n              },\n              text: 'ipsum'\n            },\n            {\n              text: 'dolor'\n            },\n          ]} />\n<Avatar\n    src={'https://facebook.github.io/react/img/logo.svg'}\n    alt={'logo'}\n    size=\"large\"\n    type=\"circle flexible\"/>\n\n    <App2></App2>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}